<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linear Algebra III-Group</title>
      <link href="/2022/02/01/linear-algebra-3/"/>
      <url>/2022/02/01/linear-algebra-3/</url>
      
        <content type="html"><![CDATA[<p>今天是虎年的大年初一!祝大家虎年行大運 🐯!但不免俗地還是要來發一篇線性代數的筆記囉~這篇筆記會延續上一篇筆記的代數結構開始進行介紹，首先介紹的是體(Group)這個結構，這個結構是環(Ring)底下的一個子結構(P.S.上一篇有介紹唷!)，一起來看看要如何操作它吧!</p><div class="note success flat"><p>本篇筆記由我與國立嘉義高中數資班黃佑得共同持有!</p></div><p>$(S,*)\implies$群<br>(1) 封 $\implies$ 群<br>(2) 結 $\implies$ 半群<br>(3) 單 $\implies$ 么半群<br>(4) 反 $\implies$ 群<br>(5) 交 $\implies$ 交換群</p><p>考慮$(G,*)$$($如$(\mathbb{Z},+))$</p><ul><li><p>(i)封閉性: $a*b\in G, \forall a,b\in G$，<strong>最重要的性質</strong>。</p></li><li><p>(ii)結合律: $(a*b)*c=a*(b*c),\forall a,b,c \in G$</p><p>—semi group $\uparrow$—</p></li><li><p>(iii)單位元素:$\exists !e\in G s.t. e*a=a*e=a, \forall a\in G$</p><p>—monoid $\uparrow$—</p></li><li><p>(iv) 反元素: $\exists !a^{-1}\in G$ $s.t.$ $a^{-1}*a=a*a^{-1}=1,\forall a \in G$</p><p>—group $\uparrow$—</p></li><li><p>(v)交換律: $a*b=b*a, \forall a,b \in G$</p><p>—abelian group $\uparrow$—</p></li></ul><hr><h1 id="Practical-Drill"><a href="#Practical-Drill" class="headerlink" title="Practical Drill"></a>Practical Drill</h1><p>e.g. 判斷下列是否屬於群(Group)<br>(1) $(\mathbb{N},+)\implies \times$ (2) $(\mathbb{Z},+)\implies \circ$</p><p>(3) $(\mathbb{Z},-)\implies \times$ (4) $(\mathbb{Z},\cdot) \implies \times$</p><p>(5) $(\mathbb{Q},+)\implies \circ$ (6) $(\mathbb{Q},\cdot)\implies \times$</p><p>(7) $(\mathbb{Q}$ \ ${0},\cdot) \implies \circ$ (8) $(\mathbb{Q}^c,+)\implies \times$</p><p>(9) $(\mathbb{Q}^c,\cdot)\implies \times$ (10) $(\mathbb{R}^2,+)\implies \circ$</p><p>(11) $(\mathbb{R}^2,\cdot) \implies \times$ (12) $(\mathbb{R}^3,\times)\implies \times$</p><p>(13) $(M_2(\mathbb{R}),+)\implies \circ$ ($M:$Matrix，方陣) (14) $(M_2(\mathbb{R}),\cdot)\implies \times$</p><p>(15) 令$GL_2(\mathbb{R})=${$A\in M_2(R)|det(A)\neq 0$}$\implies(GL_2(R),\cdot)\implies \circ$ <strong>(不可交換，無限群)</strong><br>($GL:$可逆矩陣(General Linear Group，一般線性群))</p><p>(16) $R=2$階旋轉矩陣$\Rightarrow (R,\cdot)\implies \circ$</p><p>(17) 定義 $P_2(\mathbb{R})=${$a_2x^2+a_1x+a_0 | a_i \in \mathbb{R}, \forall i=0,1,2$}$\implies \circ$</p><p>(18) 定義$S_n=${$f:${$1\sim n$}$\to ${$1\sim n$}$|f$ $is$ $1-1,onto$}$\implies (S_n,\circ)\implies \circ$ <strong>(不可交換，有限群)(可證明五次方程式無公式解，A5)</strong><br>e.g.<br>$S_2=${$\left(\begin{matrix}1 &amp; 2 \\1 &amp; 2 \\\end{matrix}\right)=e,\left(\begin{matrix}2 &amp; 1 \\1 &amp; 2 \\\end{matrix}\right)=\left(\begin{matrix}1 &amp; 2\end{matrix}\right)$}</p><p>$(f_2 \cdot f_2)(1)=1$、$(f_2 \cdot f_2)(2)=2$</p><p>$S_3=${$\left(\begin{matrix}1 &amp; 2 &amp; 3\\1 &amp; 2 &amp; 3 \\\end{matrix}\right)=e,\left(\begin{matrix}1 &amp; 2 &amp; 3\\1 &amp; 3 &amp; 2 \\\end{matrix}\right)=(2\ \ 3),(1\ \ 2),(1\ \ 3),(1\ \ 2\ \ 3),(1\ \ 3\ \ 2)$}</p><p>$(123)\circ(12)${$123$}$=${$321$}、$(12)\circ(123)${$123$}$=${$132$}</p><div class="note danger flat"><p>$Thm1.$ 任何有限群都是$S_n$的一個子群 $for\ some\ n\ \in<br>\mathbb{N}$<br>$Thm2.$ $S_n$ is non-ab, $\forall n &gt;= 3$</p></div><div class="note success flat"><p>Exercise:<br>$Q1:$<br>$(S_4,\circ)=?$<br>$Q2:$<br>比較 $Z_6$ {$0,1,2,…,5$} 和 $S_3$ {$e,(12),(23)…$}，是否存在一一對應的關係。</p></div><p>(19) 定義$\mathbb{Z}_n=${$0,1,2…n-1$}為 $mod\ n$ 的餘數 $\Rightarrow$ $(\mathbb{Z}_n,+) \implies\ \circ$</p><p>(20) $(\mathbb{Z}_n,\cdot)$ $\implies$ $\times$<br>e.g. $n=6$</p><p>$\mathbb{Z}6:$</p><table><thead><tr><th align="center"></th><th align="center">$\bar{0}$</th><th align="center">$\bar{1}$</th><th align="center">$\bar{2}$</th><th align="center">$\bar{3}$</th><th align="center">$\bar{4}$</th><th align="center">$\bar{5}$</th></tr></thead><tbody><tr><td align="center">$\bar{0}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{0}$</td></tr><tr><td align="center">$\bar{1}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{1}$</td><td align="center">$\bar{2}$</td><td align="center">$\bar{3}$</td><td align="center">$\bar{4}$</td><td align="center">$\bar{5}$</td></tr><tr><td align="center">$\bar{2}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{2}$</td><td align="center">$\bar{4}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{2}$</td><td align="center">$\bar{4}$</td></tr><tr><td align="center">$\bar{3}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{3}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{3}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{3}$</td></tr><tr><td align="center">$\bar{4}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{4}$</td><td align="center">$\bar{2}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{4}$</td><td align="center">$\bar{2}$</td></tr><tr><td align="center">$\bar{5}$</td><td align="center">$\bar{0}$</td><td align="center">$\bar{5}$</td><td align="center">$\bar{4}$</td><td align="center">$\bar{3}$</td><td align="center">$\bar{2}$</td><td align="center">$\bar{1}$</td></tr></tbody></table><p>(21) $(\mathbb{Z}_p,\cdot)\implies \times$</p><p>(22) $(\mathbb{Z}_p-{0},\cdot) \implies \circ$ $(ab. group)$(交換群)</p><p>$\mathbb{Z}5:$</p><table><thead><tr><th align="center"></th><th align="center">$\bar{1}$</th><th align="center">$\bar{2}$</th><th align="center">$\bar{3}$</th><th align="center">$\bar{4}$</th></tr></thead><tbody><tr><td align="center">$\bar{1}$</td><td align="center">$\bar{1}$</td><td align="center">$\bar{2}$</td><td align="center">$\bar{3}$</td><td align="center">$\bar{4}$</td></tr><tr><td align="center">$\bar{2}$</td><td align="center">$\bar{2}$</td><td align="center">$\bar{4}$</td><td align="center">$\bar{1}$</td><td align="center">$\bar{3}$</td></tr><tr><td align="center">$\bar{3}$</td><td align="center">$\bar{3}$</td><td align="center">$\bar{1}$</td><td align="center">$\bar{4}$</td><td align="center">$\bar{2}$</td></tr><tr><td align="center">$\bar{4}$</td><td align="center">$\bar{4}$</td><td align="center">$\bar{3}$</td><td align="center">$\bar{2}$</td><td align="center">$\bar{1}$</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
            <tag> Linear Algebra </tag>
            
            <tag> College </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linear Algebra II-Linear Algebra</title>
      <link href="/2022/01/31/linear-algebra-2/"/>
      <url>/2022/01/31/linear-algebra-2/</url>
      
        <content type="html"><![CDATA[<p>這篇筆記會開始介紹線性代數的基本性質與定義操作，是線性代數的重要基礎，也可以推演出日後筆記的一些重要觀念，尤其是八大基本性質的部分一定要好好熟悉喔!一起來看看吧~</p><div class="note success flat"><p>本篇筆記由我與國立嘉義高中數資班黃佑得共同持有!</p></div><h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><p>若$V$是一個向量空間、$F \in \mathbb{R}$<br>若$x,y \in V \Longrightarrow x+y \in V$<br>若$c \in F$, $x \in V \Longrightarrow c \cdot x \in V$<br>且滿足</p><div class="note warning flat"><ol><li>$(x+y)+z=x+(y+z), \forall x,y,z \in V$</li><li>$\exists !$ $0 \in V s.t. 0+x=x,  \forall x \in V$</li><li>$\exists !$ $-x \in V s.t. x+(-x)=0, \forall x \in V$</li><li>$x+y=y+x, \forall x,y \in V$</li><li>$(ab)x=a(bx), \forall a,b \in F, x \in V$</li><li>$\exists !$ $1 \in F s.t. 1 \cdot x = x, \forall x \in V$</li><li>$(a+b)x=ax+bx,\forall a,b \in F,x \in V$</li><li>$a(x+y)=ax+by,\forall a \in F, x,y \in V$</li></ol></div><p>   等八大基本定義，則形成線性代數結構(Linear Algebra)</p><h1 id="代數結構-Linear-Algebra"><a href="#代數結構-Linear-Algebra" class="headerlink" title="代數結構(Linear Algebra)"></a>代數結構(Linear Algebra)</h1><ul><li>具有線性性質的代數結構</li></ul><h2 id="線性性質"><a href="#線性性質" class="headerlink" title="線性性質"></a>線性性質</h2><p><img src="https://i.imgur.com/Jk9wuWg.png"></p><p><strong>函數</strong> $\rightarrow$ $f(x+y)=f(x)+f(y)、f(c \cdot x)=c \cdot f(x)$</p><ul><li>$f(x)=mx ,\forall m\in \mathbb{R}$，是線性</li><li>$f(x)=x^2$，非線性</li><li>$f(x)=mx+b,\forall m,b\in \mathbb{R}$，非線性</li><li>期望值: $E(ax+by)=aE(x)+bE(y),\forall a,b\in \mathbb{R}$，是線性</li><li>標準差: $\sigma(ax+b)=|a|\sigma(x),\forall a,b\in \mathbb{R}$，非線性</li><li>$d(微分算子): f(x),g(x)$為 $x$ 的方程式 $\Rightarrow d(f+g)=d(f)+d(g)，d(cf)=c\cdot d(f),\forall c\in \mathbb{R}$，是線性</li><li>$\int(積分算子):f(x),g(x)$為 $x$ 的方程式$\Rightarrow \int(f+g)=\int (f)+\int(g),\int  (f)=c\int (f),\forall c\in \mathbb{R}$，是線性</li><li>$\sum\limits(a_k+b_k)=\sum\limits a_k + \sum\limits b_k，\sum\limits ca_k = c\sum\limits a_k$，是線性</li><li>驗證是否為線性函數: $f(x_1+x_2)=f(x_1)+f(x_2)$ 是否成立?</li></ul><p><strong>集合</strong> $\rightarrow$ $a,b \in \mathbb{S} \implies a+b \in \mathbb{S}、a \in \mathbb{S}, c \in \mathbb{F} \implies c \cdot a \in \mathbb{S}$</p><ul><li>$(\mathbb{Z},+),(\mathbb{Q},+),(\mathbb{R},+),(\mathbb{C},+)$</li><li>$P_n(\mathbb{R})={$次數小於等於 n 次的多項式$}$</li><li>$\mathbb{R}^2(平面向量)、\mathbb{R}^3(空間向量)…\mathbb{R}^n$</li><li>方陣$M_n(\mathbb{R})$、矩陣$M_{m\times n}(\mathbb{R})$</li></ul><h2 id="Algebraic-Structure"><a href="#Algebraic-Structure" class="headerlink" title="Algebraic Structure"></a>Algebraic Structure</h2><p><img src="https://i.imgur.com/RHdZHxv.png"></p><ul><li>群 1 運算(次數)</li><li>模 1.5 運算(次數)</li><li>環 2 運算(次數) $(\mathbb{Z},+,\cdot)$</li><li>向量空間 $(\mathbb{R}^2,+,\cdot)$，這裡的 $\cdot$ 是指係數積</li><li>體 $(\mathbb{Q},+,\cdot)$</li></ul><p>Definition: 令$\mathbb{S}=$ 集合，$*=$ 運算 $\implies$ 能滿足特定規則的$(\mathbb{S},*)$稱為一個代數結構<br>e.g. 群環體模 v.s. lattice(格 in 化學),maniford(流形)</p>]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
            <tag> Linear Algebra </tag>
            
            <tag> College </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linear Algebra I-Preface and Prior Knowledge</title>
      <link href="/2022/01/25/linear-algebra-1/"/>
      <url>/2022/01/25/linear-algebra-1/</url>
      
        <content type="html"><![CDATA[<p>這篇筆記主要整理國立嘉義高中蔡東霖老師上課時所補充的線性代數課程內容，內容會提及包括空間向量、體等重要的線性代數結構與基礎，並在部分內容中以高中課程內容作為舉例以及進行相對應的延伸。一起來看看大學等級的數學課程究竟是怎麼一回事吧~</p><div class="note success flat"><p>本篇筆記由我與國立嘉義高中數資班黃佑得共同持有!</p></div><h1 id="Introduction-Graph"><a href="#Introduction-Graph" class="headerlink" title="Introduction Graph"></a>Introduction Graph</h1><p><img src="https://i.imgur.com/QTPrVdF.png"></p><h1 id="幾何"><a href="#幾何" class="headerlink" title="幾何"></a>幾何</h1><p><img src="https://i.imgur.com/KxfbzVE.png"></p><ul><li>幾何(形) $Geometry$ $\to$ 解析幾何 $\to$ 拓樸學$(A \equiv R \not\equiv B、Q \equiv P)$、$($ 甜甜圈與咖啡杯$)$</li></ul><h1 id="代數"><a href="#代數" class="headerlink" title="代數"></a>代數</h1><p><img src="https://i.imgur.com/7xfx6Y0.png"></p><ul><li>未知數:一元$n$次方程式與$n$元一次方程式(高斯消去法 $\to$ 齊次解(向量空間)&amp;特定解 or 反矩陣</li><li>$Lie$ $Gruop$ : $E6$ ~ $E8$(宇宙理論)(大一統理論)、$F4$、$G2$</li><li>代數結構: 體$Field$、群$Group$、環$Ring$</li></ul><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><img src="https://i.imgur.com/1CmzY5g.png"></p><ul><li>芝諾悖論: 阿基米德與烏龜 🐢</li><li>微分方程: 與日常現象相關<ul><li>醫學系:藥量殘留劑量 💊</li><li>工程領域:電機、土木、水利、機械、化學…etc.<br>e.g. 水壩壁與雙曲線</li></ul></li><li>高等微積分: 收斂函數、發散函數、converse、connect、continuous…</li><li>複變數函數論</li><li>實變數函數論 (測度論)</li><li>統計: 大數據$Big$ $Data$、調和分析$Harmonic$ $Analysis$(電機系分析訊號)($wavelet$ $theory$)、財務數學(財務分析師-華爾街)(精算師 e.g.保險業)</li></ul><h1 id="離散數學"><a href="#離散數學" class="headerlink" title="離散數學"></a>離散數學</h1><p><img src="https://i.imgur.com/8v8K6sx.png"></p><ul><li>排列組合: 計數原理</li><li>圖論: 四色定理</li><li>集合: Category(範疇論)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
            <tag> Linear Algebra </tag>
            
            <tag> College </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寫畫桃城-桃花心木的深情記憶</title>
      <link href="/2021/12/26/Momoshiro/"/>
      <url>/2021/12/26/Momoshiro/</url>
      
        <content type="html"><![CDATA[<p>這篇文章【桃花心木的深情記憶】是國立嘉義高中三年級資優班的課程計畫之一，也印製成嘉中桃城文學集，這裡擷取一篇我的參賽文章進行分享，希望在生活中帶給大家一個不一樣的想法與觀點!</p><div class="note danger flat"><p>文章皆為作者本人自由創作，請勿以內容為由進行不當言論發表，否則作者保留法律追訴權。</p></div><h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><p>街道上，紛飛的落葉，為夏捎來秋的信息。微風裡，在冬日蟄伏已久的生機，此刻悠然綻放。輕踏在落葉堆起的大道，彷若舊朝出巡的帝王之姿，回味古色古香的輝煌歲月。一旁的大道車水馬龍，駛過捲起的氣流，讓落葉們在林道中跳起了優雅的華爾滋。時光停留在斑駁泛黃的照片之中，我抱著高聳筆挺的林木，燦著溫馨的笑容。它，是桃花心木道，一部用風景作畫的絢麗詩集。</p><p>踏在桃花心木的落英之上，香氣捎來了童年的記憶。牽著祖母的手，我以那搖搖晃晃的姿態，在桃花心木道上奔躍著。祖母蹣跚的步伐，縱然緩慢，卻引領著我探索世界的好奇心。每日夕陽西下之時，祖母總會帶著我在林間散步。幼時懵懂，只覺飄落林道的花瓣是獨佔世界的美，直到逐漸的時光漫步，方才驚覺身旁的這片蓊鬱蒼野，是如此不凡的鬼斧神工。四季的遞嬗，在那高聳的林木間綻放風情萬種，是天真的縱情，亦是綿延的溫存。</p><p>春季，歷經了冬日的洗禮。林道抹上了一點翠綠，是生氣蓬勃，在曾經枯黃的樹林掙出了天際，翳入了陽光的洗禮；夏天，是萬物歡慶之時，層層疊疊的綠意映滿了畫框的視野，長條型的碧葉，劃著平行縱橫的葉脈，在微風中搖曳，在豔日下發散萬丈金光；踏過了夏日的歲月，秋日猝不及防地到來了。天氣逐漸轉涼，也在林道中添了幾分滄桑。橘紅的落葉紛飛，鋪上了一層鮮明的黃金步道；冬日，是一年的結束，雖然望不見令人動容的生機，但那直立挺拔的林木，也彷彿守護著這片曠土，昭告著即將來臨的生命。</p><p>在那片桃花心木中，我所望見的，不僅僅是四季的輪迴運轉。有時，烏雲掩去了閃耀的陽光，天地之間瞬息變得昏暗。萬物不再鳴啼，肅穆地彷若世界末日來臨。霎時，微微的雨滴落下，輕輕的打落在青澀的葉上。逐漸，雨勢滂沱，傾灌大地的雨水窸窣作響，譜著撼動人心的交響曲。我時常背著祖母的再三叮嚀，自個兒著上雨衣，便踏進那與水共舞的曼妙世界。自然的力量，遠遠地勝過了人工的世界，喜歡讓那雨水重重地砸在我的背上，有些疼痛，但更多的是交織的興奮與喜悅。雨畢，高掛在天際的虹，是天神所降臨的迎接之門，在桃城的道路上開啟著一扇心的通道。永不熄滅的心火，在我心裡點燃著，嚮往著天氣的幻化萬千。</p><p>儘管如此，我最喜愛的，依然是那陽光灑落的秋日時分，那祖母能夠牽著我徒步在桃花心木中的時分。棧道上，光線筆直的透入了遮蔭的樹林，在地面散出了刺眼而亮麗的光芒。坐在一旁的椅子上，看著搖曳生姿的枯葉一葉葉飄著，襯著掠過天際的朵朵白雲，在我眼前演奏著一幅深情的歌。祖母的臉龐，燦著一片喜悅，彷彿被那片美景調劑了身心。她時常對我說:「媠个事物毋是逐工有，著愛珍惜。」這句話直到今日的我，依然受用。它讓我十分珍惜身旁的種種事物，縱然有時感到挫折，卻依然堅守著我的信念。</p><p>可惜的是，現在的祖母年事已高，我也隔了一段漫長的時間未曾享受與祖母共步的幸福時刻了。回憶裡的風情，在我腦海迴盪。世事紛擾，唯獨那一方純真的回憶，堅守著我心中的童年。如今，回到了熟悉的棧道，我手裡小心翼翼地牽著佝僂的祖母，慢慢地走在熟悉的風景，呼吸著熟悉的空氣，享受著熟悉的天倫之樂。曾經的照片，慈祥的祖母牽著的我的小手漫步；今日的我，將牽著祖母皺紋滿佈的手，走向那剎那的永恆。</p><p>桃城，是我回憶的出發站。火車奔騰著遊子的歸心似箭，也捎著我回憶深處的幸褔。飄落的橘紅葉片，寫著時間所刻下的印記，也存著我喜悅的情誼。縱然那片美景將不再是我每日散步的那方土地，但曾經的回憶，終將引領我重回那樹林裡的蒼綠。悄然啟程，在熟悉的夢裡，駛過了繁華熱鬧的都市，駛過了險惡山谷中的囹圄，但最終，它將抵達那座終點站，那條屬於回憶的，桃花心木道。</p><h1 id="Special-Thanks"><a href="#Special-Thanks" class="headerlink" title="Special Thanks"></a>Special Thanks</h1><div class="note warning flat"><p>國立嘉義高中美術班 320 張芷瑄 插圖繪製</p></div><p><img src="https://i.imgur.com/iBFRg9N.jpg"></p><div class="note warning flat"><p>2021 國立嘉義高中 寫畫桃城-桃城文學作品集</p></div><p><img src="https://i.imgur.com/Dw7DEkY.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fibonacci Sequence&#39;s Transformation</title>
      <link href="/2021/08/25/fibonacci-sequence-trans/"/>
      <url>/2021/08/25/fibonacci-sequence-trans/</url>
      
        <content type="html"><![CDATA[<p>這篇筆記主要會整理如何對費波那契數列(Fibonacci Sequence)的遞迴式進行數學運算，並將其轉換為可以項數索引值表示的一般式結構。</p><h1 id="What’s-Fibonacci-Sequence"><a href="#What’s-Fibonacci-Sequence" class="headerlink" title="What’s Fibonacci Sequence?"></a>What’s Fibonacci Sequence?</h1><p>首先簡單定義著名的費波那契數列遞迴式:</p><p>滿足$F_1=F_2=1$且$\forall n∈N$存在以下關係:</p><p>$F_{n+2} = F_n + F_{n+1}$</p><p>則將此序列稱為費波那契數列(Fibonacci Sequence)。</p><p>因此我們可以透過以上的等式列出此數列的前幾項:<br>$1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144…$</p><h1 id="History-of-Fibonacci-Sequence"><a href="#History-of-Fibonacci-Sequence" class="headerlink" title="History of Fibonacci Sequence"></a>History of Fibonacci Sequence</h1><p>公元 1150 年，印度數學家 Gopala 在研究箱子包裝物件長寬剛好為 1 和 2 的可行方法數目時，首先描述這個數列。而接著在歐洲的義大利數學家費波那契(Fibonacci)則在描述兔群生長問題時，使用了這個數列來描述之，費波那契數列也因此開始受到廣泛的研究。</p><p>該問題細部如下:</p><ol><li>第一個月初有一對剛誕生的兔子</li><li>第二個月之後（第三個月初）牠們可以生育</li><li>每月每對可生育的兔子會誕生下一對新兔子</li><li><strong>兔子永不死去</strong></li></ol><p>這項問題的每個月存在兔子對數即構成費波那契數列。</p><p>費波那契數列的應用十分廣泛，包括黃金比例、植物學的葉形分布、以及許多的數學性質、最佳化理論等，對於這項數列都有著十分神奇的關聯性，事實上數學家廣泛認為這與費波那契數列的黃金比例性質有關。</p><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>在將費波那契數列轉換為一般式之前，我們先來複習高中所學到的遞迴式轉換為一般式的過程。</p><h2 id="Example-1-一階遞迴"><a href="#Example-1-一階遞迴" class="headerlink" title="Example 1 (一階遞迴)"></a>Example 1 (一階遞迴)</h2><p>已知數列${a_n}$的首項$a_1=1$，且該數列滿足$a_{n+1}=a_{n}\times \dfrac{n}{n+1}$，$\forall n \in N$，求$a_n$的一般式$?$</p><p><strong>Solution:</strong><br>$a_2=a_1\times \dfrac{1}{2}$<br>$a_3=a_2\times \dfrac{2}{3}$<br>$a_4=a_3\times \dfrac{3}{4}$<br>$…$<br>$\times)a_n=a_{n-1}\times \dfrac{n-1}{n}$<br>$———————————–$<br>$a_n=a_1\times \dfrac{1}{n}$</p><p>又$a_1=1$<br>$\implies a_n=\dfrac{1}{n}，\forall n \in N$</p><p><strong>Example 1</strong>運用了累乘法來對遞迴式進行處理，這類對遞迴式進行四則運算的手法經常被運用到解決單純一階遞迴一般式的問題利用遞迴項恆等式的四則運算來消去不必要的項目，獲得最終以$n$表示的一般項。也許你會問，遞迴式化簡真的如此簡單嗎?讓我們看看另一個例子。</p><h2 id="Example-2-二階遞迴"><a href="#Example-2-二階遞迴" class="headerlink" title="Example 2 (二階遞迴)"></a>Example 2 (二階遞迴)</h2><p>$a_1=1，a_2=1，a_{n+2}=2a_{n+1}+3a_n，n \in N$，求$a_n$的一般式$?$</p><p><strong>Solution:</strong><br>將原遞迴式利用未知數$k$移項一下，可得</p><p>$a_{n+2}=2a_{n+1}+3a_n\implies a_{n+2}-ka_{n+1}=(2-k)a_{n+1}+3a_n$</p><p>需求適當$k$使得遞迴式左右皆呈單項，列式可得$\dfrac{1}{2-k}=\dfrac{-k}{3}$<br>解方程式得$k=-1$ $or$ $3$。</p><p>① $k=-1$</p><p>代回原遞迴式得$a_{n+2}+a_{n+1}=3(a_{n+1}+a_n)=3^2(a_n+a_{n-1})=$ $…$<br>$=3^n(a_2+a_1)=2\cdot 3^n$</p><p>② $k=3$</p><p>代回原遞迴式得$a_{n+2}-3a_{n+1}=(-1)(a_{n+1}-3a_n)=(-1)^2(a_n-3a_{n-1})=$ $…$<br>$=(-1)^n(a_2-3a_1)=(-2)\cdot (-1)^n$</p><p>利用以上兩個結果解聯立方程式</p><p>$<br>  \begin{cases}<br>    a_{n+2}+a_{n+1}=2\cdot 3^n \\<br>    a_{n+2}-3a_{n+1}=(-2)\cdot (-1)^n<br>  \end{cases}<br>$</p><p>可得$a_{n+1}=\dfrac{3^n+(-1)^n}{2}$，代入$n=0$發現$a_1$符合一般式規則，即可求得一般式為</p><p>$a_n=\dfrac{3^{n-1}+(-1)^{n-1}}{2}，\forall n \in N$</p><p>上面<strong>Example 2</strong>提到了一個巧妙的變換手法，我們稱此方法為階差法，但費波那契數列是否能夠用類似的手法來處理呢?</p><p>答案是可以的。費波那契數列事實上是二階遞迴的一種，因此可以利用上方舉例的<strong>Example 2</strong>手法來處理，但因為算式的處理難易度考量，處理的手法可能會有些許的不同。此外，二階遞迴的化簡方法亦不僅一種，以下將會介紹除了階差法在內的三種方式來化簡之，一起來看看~</p><h1 id="階差法"><a href="#階差法" class="headerlink" title="階差法"></a>階差法</h1><h2 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h2><p>根據費波那契數列遞迴式利用未知數$\alpha$移項，可得</p><p>$F_{n+2}=F_{n+1}+F_n\implies F_{n+2}-\alpha F_{n+1}=(1-\alpha)F_{n+1}+F_n$</p><p>我們使用階差法的目標在於使兩邊成為單項，因此可得等式$\dfrac{1}{1-\alpha}=\dfrac{-\alpha}{1}$</p><p>解得$\alpha =\dfrac{1\pm \sqrt{5}}{2}$</p><p>接著分別使用兩個$\alpha$的實根代回原遞迴式並解聯立方程式(可參考上方<strong>Example 2</strong>)，即可得到一般式。</p><p>但這個方法太早牽涉到根號的運算，因此解的過程會非常辛苦…😵<br>讓我們來看看另一種較為簡單的階差法處理方式吧!</p><h2 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h2><p>我們同樣利用未知數$\alpha$來對遞迴式移項，但形式有些不同:<br>$F_{n+2}=F_{n+1}+F_n\implies F_{n+2}-\alpha F_{n+1}=(1-\alpha)(F_{n+1}-\alpha F_n)$</p><p>接著代入索引值:</p><p>$\begin{cases}<br>    F_{n}-\alpha F_{n-1}=(1-\alpha)(F_{n-1}-\alpha F_{n-2}) \to (1)式 \\<br>    F_{n-1}-\alpha F_{n-2}=(1-\alpha)(F_{n-2}-\alpha F_{n-3}) \to (2)式 \\<br>    … \\<br>    F_4-\alpha F_3=(1-\alpha)(F_3-\alpha F_2) \to (n-3)式 \\<br>    F_3-\alpha F_2=(1-\alpha)(F_2-\alpha F_1) \to (n-2)式<br>  \end{cases}$</p><p>此時考慮$(1)$式$+(1-\alpha)\times(2)$式$+(1-\alpha)^2 \times(3)$式$+…+(1-\alpha)^{(n-3)}\times(n-2)$式，可得</p><p>$F_n-\alpha F_{n-1}=(1-\alpha)^{n-2}(F_2-\alpha F_1)$</p><p>再代入一次索引值:</p><p>$\begin{cases}<br>    F_n-\alpha F_{n-1}=(1-\alpha)^{n-2}(F_2-\alpha F_1) \to (1)式 \\<br>    F_{n-1}-\alpha F_{n-2}=(1-\alpha)^{n-3}(F_2-\alpha F_1) \to (2)式 \\<br>    … \\<br>    F_4-\alpha F_3=(1-\alpha)^{2}(F_2-\alpha F_1) \to (n-3)式 \\<br>    F_3-\alpha F_2=(1-\alpha)(F_2-\alpha F_1) \to (n-2)式<br>  \end{cases}$</p><p>此時接著考慮$(1)$式$+\alpha\times(2)$式$+\alpha^2 \times(3)$式$+…+\alpha^{(n-3)}\times(n-2)$式，可得等式<br>$F_n-\alpha^{n-2}F_2=(F_2-\alpha F_1)(1-\alpha)^{n-2}\cdot\dfrac{(1-(\dfrac{\alpha}{1-\alpha})^{n-2})}{1-\dfrac{\alpha}{1-\alpha}}$</p><p>以$F_1=F_2=1$代回求得$F_n=\dfrac{(1-\alpha)^n-\alpha^n}{1-2\alpha}$</p><p>最後一步就是將$\alpha$的值求出!</p><p>以遞迴式規則可以輕易求出$F_3=2$，將其代回上方的$(n-2)$式求解可得等式</p><p>$2-\alpha=(1-\alpha)^2\implies \alpha^2-\alpha-1=0$</p><p>解得$\alpha=\dfrac{1\pm \sqrt{5}}{2}$，代回原式!</p><p>求得費波那契數列一般項$F_n=\dfrac{1}{\sqrt{5}}((\dfrac{1+\sqrt{5}}{2})^n-(\dfrac{1-\sqrt{5}}{2})^n)$</p><blockquote><p>現在知道為什麼費氏數列的一般項化簡會這麼麻煩了嗎~:P</p></blockquote><h1 id="矩陣法"><a href="#矩陣法" class="headerlink" title="矩陣法"></a>矩陣法</h1><p>上面的階差法運用了類似於<strong>等比數列</strong>的概念將費波那契數列轉換為一般項，因此若運用類似的方法，推測矩陣應亦能達成此效果。以下為推導過程:</p><p>利用觀察法，可以將費氏數列的原遞迴式改寫為矩陣形式<br>$F_{n+1}=F_{n}+F_{n-1}\implies \left(<br>\begin{array}{c}F_{n+1} \\ F_{n} \\ \end{array} \right)=\left( \begin{array}{cc} 1 &amp; 1 \\ 1 &amp; 0 \\<br>\end{array} \right) \left( \begin{array}{c} F_{n}  \\ F_{n-1}  \\ \end{array} \right)$</p><p>繼續下推可得$\left(<br>\begin{array}{c}F_{n+1} \\ F_{n} \\ \end{array} \right)=\left( \begin{array}{cc} 1 &amp; 1 \\ 1 &amp; 0 \\<br>\end{array} \right)^{n-1} \left( \begin{array}{c} F_{2}  \\ F_{1}  \\ \end{array} \right)$</p><p>故我們只要將$\left( \begin{array}{cc} 1 &amp; 1 \\ 1 &amp; 0 \\<br>\end{array} \right)^{n-1}$求出即可獲得一般式。而因為此法為求矩陣高次方，故直接利用對角化性質求解。</p><p>令原矩陣之特徵值(Eigenvalue)為$\lambda$，特徵向量為$x$，矩陣$A=\left(\begin{array}{cc} 1 &amp; 1 \\ 1 &amp; 0 \\<br>\end{array} \right)$，需求解$\lambda$使得$Ax=\lambda x$(特徵方程式定義)。經過移項可得$(A-\lambda I)x=0(I$是為了簡化計算而乘入，不影響計算結果$)$，根據矩陣與行列式互換性質得$det(A-\lambda I)=0\implies det\left( \begin{array}{cc} 1-\lambda &amp; 1 \\ 1 &amp; -\lambda \\<br>\end{array} \right)=0\implies \lambda^2-\lambda-1=0$，解得$\lambda=\dfrac{1\pm \sqrt{5}}{2}$，可求出其中兩個特徵向量$x=\left(\begin{array}{c} \dfrac{1\pm \sqrt{5}}{2} \\ 1 \end{array} \right)$</p><p>以此為基礎對矩陣$A$進行對角化可得</p><p>$\left(\begin{array}{cc} 1 &amp; 1 \\ 1 &amp; 0 \end{array} \right)=\left(\begin{array}{cc} \dfrac{1+\sqrt{5}}{2} &amp; \dfrac{1-\sqrt{5}}{2} \\ 1 &amp; 1 \end{array} \right)\left(\begin{array}{cc} \dfrac{1+\sqrt{5}}{2} &amp; 0 \\ 0 &amp; \dfrac{1-\sqrt{5}}{2} \end{array} \right)\dfrac{1}{\sqrt{5}}\left(\begin{array}{cc} 1 &amp; -\dfrac{1-\sqrt{5}}{2} \\ -1 &amp; \dfrac{1+\sqrt{5}}{2} \end{array} \right)$，故</p><p>$\left(\begin{array}{cc} 1 &amp; 1 \\ 1 &amp; 0 \end{array} \right)^{n-1}=\left(\begin{array}{cc} \dfrac{1+\sqrt{5}}{2} &amp; \dfrac{1-\sqrt{5}}{2} \\ 1 &amp; 1 \end{array} \right)\left(\begin{array}{cc} (\dfrac{1+\sqrt{5}}{2})^{n-1} &amp; 0 \\ 0 &amp; (\dfrac{1-\sqrt{5}}{2})^{n-1} \end{array} \right)\dfrac{1}{\sqrt{5}}\left(\begin{array}{cc} 1 &amp; -\dfrac{1-\sqrt{5}}{2} \\ -1 &amp; \dfrac{1+\sqrt{5}}{2} \end{array} \right)$</p><p>$=\dfrac{1}{\sqrt{5}}\left(\begin{array}{cc} (\dfrac{1+\sqrt{5}}{2})^n-(\dfrac{1-\sqrt{5}}{2})^n &amp; -\dfrac{1-\sqrt{5}}{2}(\dfrac{1+\sqrt{5}}{2})^{n}+\dfrac{1+\sqrt{5}}{2}(\dfrac{1-\sqrt{5}}{2})^{n} \\ (\dfrac{1+\sqrt{5}}{2})^{n-1}-(\dfrac{1-\sqrt{5}}{2})^{n-1} &amp; -\dfrac{1-\sqrt{5}}{2}(\dfrac{1+\sqrt{5}}{2})^{n-1}+\dfrac{1+\sqrt{5}}{2}(\dfrac{1-\sqrt{5}}{2})^{n-1} \end{array} \right)$</p><p>將其代回原式並將矩陣乘開即可求得費波那契數列一般項$F_n=\dfrac{1}{\sqrt{5}}((\dfrac{1+\sqrt{5}}{2})^n-(\dfrac{1-\sqrt{5}}{2})^n)$</p><div class="note danger flat"><p>P.S.最後一步建議不要用根與係數把$n$次多項式乘開!不然可能會因為消不掉而卡住…乘開成這樣是最好消去的狀態!(除非您是通靈電神，可以在兩個根自由互換 Orz)</p></div><blockquote><p>我想起了被矩陣對角化支配的”美好”時光…&gt;&lt;</p></blockquote><h1 id="生成函數法"><a href="#生成函數法" class="headerlink" title="生成函數法"></a>生成函數法</h1><p>西元 1843 年, 法國數學家棣美弗(Jacques-Philippe-Marie Binet)利用一般生成函數求出費氏數列的一般式。這是人類紀錄史上第一次求出費氏數列一般項，也是生成函數應用於數學史的拓展。</p><p>但事實上我原本並不知道這個做法，生成函數並不在高中教材中，但就應用層面而言，它的使用廣泛度事實上遠遠超乎我們的想像，舉凡我們常用的排列組合、遞迴關係等，都可以將原來的形式$(C^m_n、P^m_n、H^m_n、$遞迴式$…)$轉換為函數的形式。但要完整的介紹生成函數事實上並不容易，我對於生成函數也不算熟悉，因此在此就僅整理生成函數如何轉換費波那契數列的部分。</p><p>利用普通生成函數(OGF，ordinary generating function)冪級數$\sum\limits_{i = 0}^\infty{a_ix^i}$對費氏數列做一般數列轉換成生成函數，可將其表為$\sum\limits_{k=1}^\infty{F_kx^k}_{(註1)}$，令其為$g(x)$並展開可得:<br>$g(x)=F_1x+F_2x^2+F_3x^3+F_4x^4+…(1)$式<br>對該函數動一點手腳:<br>$xg(x)=F_1x^2+F_2x^3+F_3x^4+F_4x^5+…(2)$式<br>再來一點:<br>$x^2g(x)=F_1x^3+F_2x^4+F_3x^5+F_4x^6+…(3)$式</p><p>接著代入$F_1=F_2=1$，當$|x|&lt;1$時，以$(1)$式$-(2)$式$-(3)$式可得$(1-x-x^2)g(x)=x\implies g(x)=\dfrac{x}{1-x-x^2}$</p><p>$=\dfrac{x}{(1-\dfrac{1+\sqrt{5}}{2}x)(1-\dfrac{1-\sqrt{5}}{2}x)}$</p><p>$=\dfrac{1}{\sqrt{5}x}(\dfrac{1}{\dfrac{1}{x}-\dfrac{1+\sqrt{5}}{2}}-\dfrac{1}{\dfrac{1}{x}-\dfrac{1-\sqrt{5}}{2}})…$(分項對消)</p><p>此時需引入勞倫級數(Laurent series)概念，在此不解說其深入概念，但是利用之，考慮以上部分分數展開式，可得該級數為<br>$g(x)=\dfrac{1}{\sqrt{5}x}\sum\limits_{n=1}^\infty{((\dfrac{1+\sqrt{5}}{2})^{n-1}-<br>(\dfrac{1-\sqrt{5}}{2})^{n-1})x^n}$</p><p>$=\dfrac{1}{\sqrt{5}}\sum\limits_{n=1}^\infty{((\dfrac{1+\sqrt{5}}{2})^{n-1}-<br>(\dfrac{1-\sqrt{5}}{2})^{n-1})x^{n-1}}$</p><p>代入後與原$g(x)$比較係數可得費波那契數列一般項$F_n=\dfrac{1}{\sqrt{5}}((\dfrac{1+\sqrt{5}}{2})^n-(\dfrac{1-\sqrt{5}}{2})^n)$</p><div class="note info flat"><p>註 1:這一步的定義事實上不夠嚴謹與詳細，詳情請見生成函數之生成方法與限制，其中牽涉到映成函數、光滑函數與完全歸納法等的運算。</p></div><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>費氏數列的神奇之處，在於其遞迴式將無理數的運算表示為有理數的遞迴式，這在數學的運算上事實上並不常見。而透過我們所推導出的一般式，我們也可以發現，費波那契數列可以被表為線性的形式$F_n=\alpha(\dfrac{1+\sqrt{5}}{2})^n+\beta(\dfrac{1-\sqrt{5}}{2})^n$，這凸顯了其之線性組合的特性，事實上，這個性質的類似方法也可以做為導出一般項的作法，一起來看看最後一種導出法吧~</p><h1 id="Bonus-線性置換法"><a href="#Bonus-線性置換法" class="headerlink" title="Bonus : 線性置換法"></a>Bonus : 線性置換法</h1><p>這裡所謂的線性，是指在透過利用費氏數列的組合下，求得一般項的方法。首先，我們可以十分簡單地推出以下兩個費氏數列的性質:</p><p>1.$(F_i)_i，(G_i)_i$均為費氏數列，則$(F_i+G_i)_i$亦為費氏數列。</p><p>$(F_{n+2}+G_{n+2})=(F_{n+1}+F_{n})+(G_{n+1}+G_{n})=(F_{n+1}+G_{n+1})+(F_{n}+G_{n})$，即可推出。</p><p>2.承上，$(\alpha F_i)_i$亦為費氏數列</p><p>$(\alpha F_{n+2})=\alpha(F_{n+1}+F_n)=(\alpha F_{n+1})+(\alpha F_n)$，即可推出。</p><p>由上兩點可以證明費氏數列經過線性組合仍為費氏數列。</p><p>因此我們可以考慮在$a_n$與$b_n$均為費氏數列(不考慮$F_1=F_2=1$之條件)的情況下，取$\alpha、\beta$ $s.t.$ $\alpha、\beta\in R$，令新數列$H_n=\alpha a_n+\beta b_n$，則新數列$H_n$為一費氏數列。從上我們可以知道，只要取得適當之數列與代數即可。</p><p>但我們如何定義$a_n$與$b_n$的存在呢?我們首先透過我們熟悉的數列來定義之，因為其是費氏數列之子元素，這樣的取法不影響我們對於費氏數列的定義。首先，若$a_n$與$b_n$為等差數列，他是沒有辦法滿足費氏數列的性質的。因此，我們考慮等比數列。若$a_n$與$b_n$屬於等比數列，又其兩者為費氏數列，可令其中一者之一般項為$a_n=kr^{n-1}$，因此透過費氏數列定義，$kr^{n+2}=kr^{n+1}+kr^n$，設定$k\ne0，r\ne1$，則可列出算式$r^2-r-1=0$，解得$a_n、b_n=((\dfrac{1\pm\sqrt{5}}{2})^{i-1})^{\infty}_{i=1}$</p><p>此時帶回原式解$\alpha$與$\beta$，且原數列$H$須滿足費氏數列之$F_1=F_2=1$性質，由此可列出以下方程式:</p><p>$\begin{cases}<br>    1=\alpha+\beta \\<br>    1=\dfrac{1+\sqrt{5}}{2}\alpha+\dfrac{1-\sqrt{5}}{2}\beta<br>  \end{cases}$</p><p>解得$\alpha=\dfrac{1}{\sqrt{5}}(\dfrac{1+\sqrt{5}}{2})、\beta=-\dfrac{1}{\sqrt{5}}(\dfrac{1-\sqrt{5}}{2})$，將四項條件代回原式即可求得費波那契數列一般項</p><p>$H_n=\dfrac{1}{\sqrt{5}}((\dfrac{1+\sqrt{5}}{2})^n-(\dfrac{1-\sqrt{5}}{2})^n)$</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://en.wikipedia.org/wiki/Fibonacci_number">https://en.wikipedia.org/wiki/Fibonacci_number</a><br><a href="https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors">https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors</a><br><a href="https://en.wikipedia.org/wiki/Generating_function">https://en.wikipedia.org/wiki/Generating_function</a><br><a href="https://en.wikipedia.org/wiki/Laurent_series">https://en.wikipedia.org/wiki/Laurent_series</a><br><a href="http://oz.nthu.edu.tw/~u9721201/penguin2/math/article/FibonacciSequence.pdf">http://oz.nthu.edu.tw/~u9721201/penguin2/math/article/FibonacciSequence.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
            <tag> Linear Algebra </tag>
            
            <tag> Fibonacci Sequence </tag>
            
            <tag> Matrix </tag>
            
            <tag> Generating Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction of COVID-19&#39;s Machanism and Impact</title>
      <link href="/2021/06/15/SARS-COV-2-1/"/>
      <url>/2021/06/15/SARS-COV-2-1/</url>
      
        <content type="html"><![CDATA[<p>西元2019年時，全球著名的COVID-19從中國爆發，其散播之快，讓全球立刻陷入了空前危機，目前全球已超過1.5億人確診。近日台灣的疫情嚴重爆發，更造成了全台的大停課，目前疫情依然沒有趨緩的跡象。此篇文章將著重於研究其病理的相關機制，並針對全球的疫情進行分析。</p><h1 id="What-is-COVID-19"><a href="#What-is-COVID-19" class="headerlink" title="What is COVID-19?"></a>What is COVID-19?</h1><p>COVID-19，現今正式名稱為SARS-Cov-2，現今一般認為其是由中國武漢起源，原本宿主應為蝙蝠或穿山甲，經過病毒變異之後轉移到人類，造成現今的嚴重疫情。</p><p><img src="https://i.imgur.com/48cfaGZ.jpg"></p><p>病毒機制方面，其為正20面體的冠狀病毒(coronavirus)，目前所發現的冠狀病毒有三個亞群、16種以上。其核酸大小是所有RNA病毒之中最大的，顆粒大小約為100nm，電子顯微鏡下呈現皇冠形。值得注意的是，該病毒擁有特別的複製校對除錯機制(proofreading)，擁有這項能力的病毒十分稀少，<del>日本製造的壓縮機也很稀少</del>。</p><h1 id="Structure-of-SARS-Cov-2"><a href="#Structure-of-SARS-Cov-2" class="headerlink" title="Structure of SARS-Cov-2"></a>Structure of SARS-Cov-2</h1><p>根據巴爾的摩病毒分類。<br><img src="https://i.imgur.com/YSYzSe7.png"><br>SARS-Cov-2屬於單股正鏈RNA(single strand positive sense RNA)(註:正鏈表示此RNA可直接轉譯出protein)，具有寄主細胞形成的脂雙層套膜，其上有四種結構蛋白維持病毒型態:</p><table><thead><tr><th align="center">蛋白名稱</th><th align="center">功能</th><th align="center">補充說明</th></tr></thead><tbody><tr><td align="center">棘蛋白(Spike Protein,S Protein)</td><td align="center">與膜上受體結合</td><td align="center">註一</td></tr><tr><td align="center">封套蛋白(Envelope Protein,E Protein)</td><td align="center">使宿主產生炎症反應、病毒組裝</td><td align="center">註二</td></tr><tr><td align="center">膜蛋白(Membrane Protein,M Protein)</td><td align="center">構成病毒形狀使套膜成形</td><td align="center">註三</td></tr><tr><td align="center">核殼蛋白(Nucleocapsid Protein,N Protein)</td><td align="center">結合病毒產生的RNA</td><td align="center">註四</td></tr></tbody></table><div class="note primary flat"><p>註一:<br>病毒表面刺突，是由三個棘蛋白組成的三聚體，其上帶有許多醣基修飾，並分為S1與S2兩個次單元(subunit)。S1位於刺突頂部，具有受體結合結構域(Receptor Binding Domain, RBD)，可與宿主細胞表面受體結合。而S2則主要將S1固定於病毒上。<br><img src="https://i.imgur.com/oWNjF6F.png"></p></div><div class="note primary flat"><p>註二:<br>封套蛋白是最小的結構蛋白，其可聚合成陽離子通道，使細胞內部ROS(Reactive oxygen species)增加，此時引發NF-κB下游反應(機制留待之後說明)，減緩ROS引起的細胞損傷並啟動炎症反應。此外，其亦與病毒組裝相關。</p></div><div class="note primary flat"><p>註三:<br>其為病毒套膜上最為主要的結構蛋白，數量最多，重點在於維持病毒的殼體網狀結構。</p></div><div class="note primary flat"><p>註四:<br>其分布在病毒內部，會與病毒的RNA結合成鏈狀，而核殼蛋白同時也會彼此結合。</p></div><h1 id="Mechanism"><a href="#Mechanism" class="headerlink" title="Mechanism"></a>Mechanism</h1><p>因為是一種新型態的病毒，因此並沒有完全準確的機制圖，因此僅介紹一個大方向，詳細的部分基於每張機制圖而有所不同。</p><p><img src="https://i.imgur.com/LFo6Uyw.jpg"></p><p>首先，外來的病毒必須先附著在細胞表面。冠狀病毒大多利用刺突細胞來與細胞結合，但事實上在一般情況下並不容易接上其利用的ligand ACE2。細胞表面有一種名為硫酸肝素蛋白多醣(Heperan Sulfate Proteoglycans, HSPGs)的物質，其由一條Core Protein加上2~3條接上多醣鏈(Glycosaminoglycan, GAG)的硫酸肝素形成。因為硫酸化的修飾使其上充滿負電荷，可作為病毒最初的附著點。在HSPGs的協助下，病毒在細胞表面辨識成功的機率會大大提升。</p><p><img src="https://i.imgur.com/Ynsmbgp.png"></p><p>先前有提到，刺突蛋白分為S1及S2兩個區域，所以在HSPGs協助之後，會需要S1上面的RBD與受體ACE2進行結合，但平時的S1傾向於水平構型，較難與ACE2結合，第一種情況需要細胞表面所具有的弗林蛋白酶(Furin)進行特殊位的切割(切割位在於S1與S2連接處，但不會切斷)，使RBD呈現站立構型之後，方可進行下一步，入侵細胞。</p><p>使用ACE2+Furin的部分，若是辨識成功會直接進行受體媒介型胞吞。而若是第二種情況，由TMPRSS2(跨膜絲胺酸蛋白酶2)進行切割(有圖示顯示其可替代Furin的切割功能)，其會將S1整個切斷之後，由S2插入寄主細胞的細胞膜，S2蛋白進行螺旋拉近胞膜距離，進行融合。</p><p><img src="https://i.imgur.com/2Y5jxOb.jpg"></p><h2 id="Supplement-ACE2-Receptor-amp-Furin"><a href="#Supplement-ACE2-Receptor-amp-Furin" class="headerlink" title="Supplement : ACE2 Receptor &amp; Furin"></a>Supplement : ACE2 Receptor &amp; Furin</h2><div class="note default flat"><h3 id="ACE2-Receptor"><a href="#ACE2-Receptor" class="headerlink" title="ACE2 Receptor"></a>ACE2 Receptor</h3><p>高中提及ACE2 Receptor的功能原本是轉換血管收縮素作用後轉為血管擴張因子，但發現2003年爆發的SARS-Cov與現今肆虐的SARS-Cov-2都能利用這個receptor來入侵人體細胞，且後者較前者的附著能力增加了約10~100倍。呼吸道與消化道的ACE2分布較多，也成為了細菌容易入侵的門戶。</p></div><div class="note default flat"><h3 id="Furin"><a href="#Furin" class="headerlink" title="Furin"></a>Furin</h3><p>Furin是一種特殊切割蛋白，透過辨識特殊序列的胺基酸並切割使蛋白質出現活性，而原先的新冠病毒無法進入人體傳染途徑，可能就是因為沒有Furin能夠辨識的序列，因此在某次突變之後出現Furin Sequence，便能成功跳到人類的感染。</p></div><p><img src="https://i.imgur.com/DLnKmxx.jpg"></p><p>在病毒進入細胞中之後，從上面的圖可以發現，經由ACE2 receptor受體媒介胞吞之後的胞內小體(endosome)，其是沒有去殼的，但經由TMPRSS2+ACE2途徑的，是已去殼的RNA+N protein，因此接下來經由ACE2 receptor的病毒必須在胞內去殼。</p><p>病毒經由胞內細胞骨架微管移行，從細胞膜往溶體移動，同時質子泵會在胞內體持續耗能注入$H^+$，使胞內小體酸化，此時會引發一種對於胞內體膜內側酸鹼值敏感的酵素，半胱胺酸組織蛋白酶(cysteine protease cathepsin)，以類似TMPRSS2的模式完成病毒去殼。但此時，若是有物質減弱胞內體酸化，則病毒會無法去殼，又在持續移行到溶酶體，最終就會在溶酶體直接裂解，達成療效，例如<strong>奎寧這類弱鹼性的藥物便是在阻斷這方面的途徑</strong>。</p><p><img src="https://i.imgur.com/LFo6Uyw.jpg"></p><p>接著我們以一開始的這張圖來解釋RNA的轉譯(translation)。</p><p>前面提到SARS-Cov-2的RNA屬於ss(single-stranded)(+)RNA，因此其上含有5’端帽與3’多腺苷酸尾，在核內可以直接接上核糖體後進行轉譯。下面稍微探究一下病毒的RNA結構:<br><img src="https://i.imgur.com/Zclz8h1.jpg"><br>這段RNA可以分為非結構蛋白(non-structural proteins, nsp)域及結構蛋白(structural proteins, sp)域，其中nsp域是可以直接進行轉譯的區域，其上的ORF1a(open reading frame)及ORF1b兩個區域，其中間有一個稱為假結(pseudoknot)的二級結構，可視為一個轉譯途中的障礙，因此會出現兩種情況:</p><ol><li>遇到假結時停止，則僅轉譯ORF1a，形成上圖的pp1a(polyproteins 1a)蛋白(nsp1-11)</li><li>遇到假結時未停止，則轉譯ORF1a與ORF1b結構，跳過假結(稱為框架轉移)，形成上圖的pp1ab(nsp1-16, <strong>except nsp11</strong>)</li></ol><p>pp1a與pp1ab經由自行/蛋白酶水解，會產生16種不同的nsp，其中絕大部分會到內質網協助病毒的基因組複製以及轉錄，少部分控制宿主的免疫反應避免自噬。</p><p>nsp3/4會在內質網上形成捲曲膜構造(convoluted membrane, CM)，並在其上產生許多囊泡，將病毒RNA與nsp1-16包起，避免被人體免疫反應偵測到。而nsp12是所有蛋白中最為重要的，直接協助RNA的合成。<br><img src="https://i.imgur.com/VSOhLsX.jpg"></p><p>而RNA複製與轉錄的部分，則是經由原有的ss(+)RNA先合成ss(-)RNA後，再一次合成為ss(+)RNA，若是合成完整的RNA，即是複製，而不完整的情況下，即是轉錄。</p><p>$Q:$ 為何會合成不同長度的RNA?</p><p>因為合成方向是由尾向頭，回顧上面的RNA結構，其會從後面的sp域3’端逆回來合成。而RNA上尾部的地方每個區段之間都有TRS-B的存在，頭端則是有TRS-L。可以觀察下圖的型態，會發現它的RNA事實上並非線狀，nsp域的地方事實上有折疊的情況，使每個TRS-B在合成途中都可能立即中止跳躍到TRS-L的地方轉錄到5’端結束合成。而這些長度不一的RNA根據序列的不同，可能在內質網上轉錄出如S/E/M/N等protein。<br><img src="https://i.imgur.com/hpa4DEL.png"></p><p>RdRp既然主宰了病毒RNA的複製與轉錄，自然有特殊的藥物來阻斷它。新聞中先前常常提到的瑞德西韋(remdesivir)，它的原理是在RdRp在RNA上移行時，瑞德西韋會嵌入i位合成在新股上，但是瑞德西韋是個錯誤的密碼子，特別用於核對正確性的nsp14也無法將其去除，因此會阻斷RNA轉錄，RdRp進而解體，利用這個效果產生病毒抑制。</p><p>病毒組裝的部分，目前眾說紛紜，較廣為接受的是N protein與RNA的結合，詳見下圖，一開始複製好的RNA因為Packaging signals而讓N protein開始接上，而N protein彼此也會互相結合，因此將RNA形成了一坨穩固的核心(RNP)。<br><img src="https://i.imgur.com/7a9YuaQ.png"></p><p>而這團核心會離開內質網，在這之前，內質網上附著了原先轉譯好的結構蛋白，出芽而形成囊泡，前往高基氏體進行修飾，在這途中的狀態，稱之為內質網-高基氏體中間體(ERGIC)。病毒會在此進行組裝，並且在完成後送到高基氏體cis面修飾。其途中會形成COPI與COPII幫助囊泡形成。</p><div class="note info flat"><p>小知識 : COPI由ERGIC傳送到ER，COPII由ER傳送到ERGIC</p></div><p>最後病毒便會進行胞吐作用(exocytosis)離開宿主細胞，繼續感染下一個細胞。</p><p>$Q :$ 蛋白質一定會這麼順利的組裝成功嗎?</p><p>事實上，病毒外殼組裝成功的機率很低，因此細胞內往往會累積大量的轉譯失敗或沒有組裝的蛋白質，稱為包涵體(inclusion body)。<br><img src="https://i.imgur.com/2TFbfnJ.png"></p><h1 id="Taiwan’s-Epidemic"><a href="#Taiwan’s-Epidemic" class="headerlink" title="Taiwan’s Epidemic"></a>Taiwan’s Epidemic</h1><p>現今台灣的疫情仍在於危急情形之下，目前中央指揮中心所頒布的分級警戒情形如下:</p><p><img src="https://i.imgur.com/iw3y53a.png"></p><p>現在的三級警戒由於疫情並沒有減緩的跡象，已經由5/18起宣布延期了2次，以目前情況而言以雙北感染最為嚴重，因應此情況，指揮中心針對現有情況提出了不少解釋，其中不乏許多專有名詞，這裡針對幾個比較常見的名詞做解釋。</p><h2 id="Cycle-Threshold-Value"><a href="#Cycle-Threshold-Value" class="headerlink" title="Cycle Threshold Value"></a>Cycle Threshold Value</h2><p>Cycle threshold value，多簡稱Ct value，是在PCR核酸檢測時所利用來紀錄核酸放大倍率的數值。PCR的原理是利用溫度的變化加上一種稱為Taq的蛋白酶與其他相關的協助酵素等，利用原本的核酸解開之後作為模板股進行新股合成，因此複製出的核酸數量會以2的指數次方成長，Ct value指的就是複製的次數。因此，假設Ct value=$n$，則核酸數量會是原本的$2^n$倍。<br><img src="https://i.imgur.com/XGlBQNV.jpg"></p><p>這個方法被作為審查是否確診的標準之一，若是Ct value很大，表示原先所採集到的核酸很少，需要進行多次的PCR才能到達能夠檢測的範圍，相對不會被認為是染疫者(完全沒有染疫者的理想Ct value為$∞$)。以台灣的標準而言，訂定Ct value 34以下為染疫者，而歐美的標準則是40，各國標準不同的情況下也可能使原先在台未檢出染疫者到國外之後反而呈現陽性反應。</p><h2 id="Rapid-Test"><a href="#Rapid-Test" class="headerlink" title="Rapid Test"></a>Rapid Test</h2><p>相對於上方提及的PCR檢測，其因需要相關的化學檢驗，步驟較為繁雜，因此快篩往往必須採取另外的檢測方式。目前最多使用的是採集受檢者鼻咽部檢體之後，以目前已知的抗體種類進行抗原檢測，若是檢出之後會有顏色變化再以肉眼判斷。目前的SARS-Cov-2抗體檢測是檢測病毒上的核殼蛋白N protein，而非病毒的RNA。</p><p><img src="https://i.imgur.com/Mzt6kqs.jpg"></p><p>另一種方法是透過抽血，檢測血液中的抗體反應，這個方法可以應用在檢測新冠肺炎的感染時程或疫苗反應(檢測IgG/IgM)，以台灣疫苗為例，AZ疫苗的成分是SARS-Cov-2的棘蛋白(S protein)，因此會檢測S protein的IgG反應(IgM在染疫後期才會大量增加，在前期無法檢測確診與否)，但這兩種方法也容易因為其他病毒有相同反應而產生偽陽性的情況。</p><p>此外，因為SARS-Cov-2上的RNA含有特殊的序列，如轉譯出RdRp蛋白(nsp12)的序列等，因此也可以透過檢測序列來進行核對，這個方法大大減低了偽陽性的個案數量。</p><p>這次就先整理到這裡吧!但是畢竟這是十分新穎的領域，我也是在網路上以及額外跟老師學習的內容中整理並學習，一定會有地方有所疏漏，如果有發現任何地方寫錯或者是不清楚都可以告訴我喔~下一次應該會整理疫苗跟確診數據統計的部分!</p>]]></content>
      
      
      <categories>
          
          <category> SARS-Cov-2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biology </tag>
            
            <tag> Medical </tag>
            
            <tag> SARS-Cov-2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 MyFirstCTF Write Up</title>
      <link href="/2021/06/06/myfirstctf-2021/"/>
      <url>/2021/06/06/myfirstctf-2021/</url>
      
        <content type="html"><![CDATA[<p>這次也參加了 AIS3 的 MyFirstCTF 競賽，裡面是一些 AIS3 的題目跟額外的 baby 友善題(結果賽中都解 baby 題 QAQ)，好像蠻少人在打 MyFirstCTF 的 Write Up 的，就來整理一下吧~不過好像比較多梗題的部分(O</p><p>P.S. 但是因為大部分的東西都被我刪了所以可能有點簡略敬請見諒 QAQ</p><p>這次的成績 17 名+兩題首殺~好像很普通 w</p><p><img src="https://i.imgur.com/NtHPsgc.png"></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="Cat-Slayer-ᶠᵃᵏᵉ-Nekogoroshi"><a href="#Cat-Slayer-ᶠᵃᵏᵉ-Nekogoroshi" class="headerlink" title="Cat Slayer ᶠᵃᵏᵉ | Nekogoroshi"></a>Cat Slayer ᶠᵃᵏᵉ | Nekogoroshi</h2><p>這題跟 AIS3 Pre-exam 是一樣的題目，直接複製 XD</p><p>題目給了一行 command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TERM=xterm-256color ssh -p 5566 h173@quiz.ais3.org</span><br></pre></td></tr></table></figure><p>把它拿到 Terminal 執行後可以發現他跳出了一個 Python 的執行畫面，用鍵盤可以輸入數字，輸入錯誤會鎖起來，因此可以用手動的輸入猜密碼，得到正確的密碼就可以解鎖 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Password: 202583045529</span><br></pre></td></tr></table></figure><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;H1n4m1z4w4_Sh0k0gun&#125;</span><br></pre></td></tr></table></figure><h2 id="祝賀-新垣結衣新婚快樂-發錢囉-baby"><a href="#祝賀-新垣結衣新婚快樂-發錢囉-baby" class="headerlink" title="[祝賀] 新垣結衣新婚快樂 發錢囉 [baby]"></a>[祝賀] 新垣結衣新婚快樂 發錢囉 [baby]</h2><blockquote><p>Bonus : First Blood</p></blockquote><p>這題給了一張圖片，看起來像是 forensics，所以先用一些例如 zsteg 或 online tool 之類的工具試了一下，後來用 binwalk 試了一下發現裡面包了一個 zip 檔。</p><p><img src="https://i.imgur.com/g264BDQ.jpg"></p><p>P.S. 是新垣結衣欸~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk baby.png</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             PNG image, 1200 x 675, 8-bit&#x2F;color RGB, non-interlaced</span><br><span class="line">179           0xB3            Zlib compressed data, best compression</span><br><span class="line">1511327       0x170F9F        End of Zip archive</span><br></pre></td></tr></table></figure><p>所以用 foremost 把裡面的東西拉出來。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ foremost baby.png -o baby</span><br><span class="line">Processing: baby.png</span><br><span class="line">|foundat&#x3D;awertyjas‮qrmnk‮.pngt�w4����?�ik�</span><br><span class="line">m��T�ԦZ&#123;�ڵ�J���F�U�k�&#x3D;�P����&amp;VlAD��z�&gt;�?��|Ϲ�x:�p?������&#125;ߏ�k�+RS0S</span><br><span class="line">*|</span><br></pre></td></tr></table></figure><p>接下來到<code>/baby</code>可以發現一個<code>00001726.zip</code>，裡面有一張圖片，推測應該是 flag，但是 local 需要密碼解鎖，猜了幾個常用密碼跟照片名還是錯誤，所以開始找 online tool。</p><p><img src="https://i.imgur.com/IJQc2PA.png"></p><p>非常幸運的是我<a href="https://www.ezyzip.com/unzip-files-online.html">第一個使用的網站</a>就讓我解開了，而且不需要密碼~</p><p>P.S. 這題應該是偽加密，但是我其實到現在還是沒搞懂它的原理是什麼 XXD</p><p><img src="https://i.imgur.com/fIGvBh8.png"></p><p>P.S. 是星野源欸~</p><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;看好了世界，我只示範一次如何一天搶走幾億人的老婆&#125;</span><br></pre></td></tr></table></figure><blockquote><p>結果新垣結衣跟星野源還是結婚了~</p></blockquote><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Copy-amp-Paste-baby"><a href="#Copy-amp-Paste-baby" class="headerlink" title="Copy &amp; Paste [baby]"></a>Copy &amp; Paste [baby]</h2><p>這題給了一個奇怪的黑色網站，有一個 flag 按鈕，按下去之後會顯示個幾秒 flag 之後消失。但是，他的 flag 大到我只看到中間部分，沒辦法送啊?</p><p>按了 F12 之後看一下發現他好像用算的把螢幕高度 anchor 住了，所以我的螢幕不夠長就看不到完整的 flag。那有什麼方法可以讓完整的 flag 顯示出來?</p><p>後來腦洞大開把瀏覽器壓扁之後，他的 height 變小，我就可以看到完整的 flag 了!</p><p>P.S. 通靈用在這裡是正確的(O</p><p><img src="https://i.imgur.com/CrzUGc1.png"></p><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;Re33Ee3E33e3eEEe3eE3El11I1l1i11y_lo0O0oo00o00oOC0OOoo00o0Oo0O0o0Ooo0Oo0oo0Oo0OOOO000OO0ng_f1aG&#125;</span><br></pre></td></tr></table></figure><p>P.S. 所以我還是不知道怎麼複製貼上 w 而且這個 flag 我打好久 QQ<br>不過還好手打，賽後用 OCR 跑出來的是錯的啦= =</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Judgement-baby"><a href="#Judgement-baby" class="headerlink" title="Judgement [baby]"></a>Judgement [baby]</h2><p>這題的題目很簡潔，只有一個<code>Judgement.py</code>跟一個<code>output.txt</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">flag = <span class="string">&#x27;AIS3&#123;THIS_IS_A_FAKE_FLAG&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">cand = string.ascii_letters + string.digits + <span class="string">&#x27;_&#123;&#125;&#x27;</span></span><br><span class="line">charset = string.printable[:<span class="number">93</span>]</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> flag:</span><br><span class="line"><span class="keyword">assert</span>(c <span class="keyword">in</span> cand)</span><br><span class="line">enc  += charset[<span class="built_in">int</span>(sha256(c.encode()).hexdigest(), <span class="number">16</span>) % <span class="built_in">len</span>(charset)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">)g;Fk@&gt;2g;2V2J?d5G3_8V2&lt;dR2i5GZ@&lt;?2)g\j_2V&amp;?2;@[F@ek2_3&quot;&#x3D;k&amp;;2)\F2J9LL4g[W2&quot;[2&lt;)RZ23@&lt;?2elFZ?2&#x3D;@jZ23@&#x3D;F2Yi52;lL5Vj2J?2J8\e@eW23e2lF330</span><br></pre></td></tr></table></figure><p>第一個想法是逆推，但是它裡面用了 sha256 加密，所以也沒辦法直接逆推，只好用順向搜尋的方式解題。</p><p>但因為他取 sha256 加密後的某個位置數字的對應字元，逆推後並不只一種可能性，所以我們用不同的 ascii 碼範圍搜尋可能字元後，因為題目提及 flag 符合文法與 leet 語法，再用手動來把 flag 拼出來。</p><p>先把爆搜的程式寫出來。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">g=<span class="string">&quot;)g;Fk@&gt;2g;2V2J?d5G3_8V2&lt;dR2i5GZ@&lt;?2)g\j_2V&amp;?2;@[F@ek2_3\&quot;=k&amp;;2)\F2J9LL4g[W2\&quot;[2&lt;)RZ23@&lt;?2elFZ?2=@jZ23@=F2Yi52;lL5Vj2J?2J8\e@eW23e2lF330&quot;</span></span><br><span class="line">s=<span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;&quot;</span></span><br><span class="line"><span class="comment"># s=cand</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">133</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">127</span>,<span class="number">64</span>,-<span class="number">1</span>): <span class="comment"># range(65,128), range(48,128)</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="built_in">int</span>(sha256(<span class="built_in">chr</span>(j).encode()).hexdigest(),<span class="number">16</span>)%<span class="number">93</span>]==g[i]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(j),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>跑出了三種結果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AISv&#123;iX_IS_M_BeautqM_day_~utside_AIr|q_MRe_SiNvin&#123;_qow&#123;RS_Arv_BlOOmIN_oN_dAys_ide_nhvse_wi|s_iwv_Y~u_ShOuM|_Be_Brnin_n_hv&#125;</span><br><span class="line">AISGEiT_IS_L_BeaZtFUL_Kay_~ZtsiKe_AIrDF_LRe_SiNGinE_FoQERS_ArG_BlOOmIN_oN_KAys_iKe_nhGse_QiDs_iQG_Y~Z_ShOZLD_Be_BUrnin_n_hG&#125;</span><br><span class="line">8IS39iT_IS_4_BeaZ215&#x3D;4_Kay_0Z2siKe_8IrD5_4Re_SiN3i79_51oQ9RS_8r3_BlOO@IN6_oN_K8ys_1iKe_7h3se_QiDs_1iQ3_Y0Z_ShOZ4D_Be_B&#x3D;r7i76_17_h311&#125;</span><br></pre></td></tr></table></figure><p>剩下就是手動拼組了，不過可以確定 range(48,128)的字串長度必定為 flag 長度，因其包含了所有 flag 可能字元。</p><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;iT_IS_4_Beaut1FUL_day_0utside_8IrD5_4Re_SiNGin9_F1owERS_Ar3_BlOOmIN6_oN_dAys_1iKe_7h3se_kiDs_1ik3_Y0u_ShOuLD_Be_BUrnin6_1n_h311&#125;</span><br></pre></td></tr></table></figure><p>P.S.我拼了 1.5hr 錯了 10 次才對，1t’s 4 re41 h31l…</p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="COVID-①⑨-baby"><a href="#COVID-①⑨-baby" class="headerlink" title="ⒸⓄⓋⒾⒹ-①⑨ [baby]"></a>ⒸⓄⓋⒾⒹ-①⑨ [baby]</h2><blockquote><p>Bonus : First Blood</p></blockquote><p>這題直接給了一個 x64 的 task.elf 檔，既然是 reverse 就直接用 IDA Pro 打開吧~</p><p>Decompile 之後先看看 main，沒有找到什麼可以用的東西，function 多到暈頭轉向，看到的東西只有<code>YOU WIN!</code>…</p><p><img src="https://i.imgur.com/uIRgngL.png"></p><p>不過在裡面發現了一個可疑的 function<code>check_flag_is_correct(char *)</code>，進去看看 decompile 的內容。</p><p><img src="https://i.imgur.com/yQDTxXZ.png"></p><p>看起來是個判斷傳入字串是否符合條件的函數，點進 target 發現有一串數字。</p><p><img src="https://i.imgur.com/XICIwSx.png"></p><p>看來是把這些數字拿來比對運算結果，所以我們就把條件判斷爆搜字串之後就可以拿到 flag 了。</p><p>寫個程式來把 flag 爆搜出來。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">32</span>]=&#123;<span class="number">65</span>,  <span class="number">72</span>,  <span class="number">81</span>,  <span class="number">48</span>, <span class="number">127</span>,  <span class="number">48</span>,  <span class="number">49</span>,  <span class="number">51</span>, <span class="number">113</span>,  <span class="number">86</span>,</span><br><span class="line">   <span class="number">98</span>,  <span class="number">59</span>,  <span class="number">97</span>,  <span class="number">62</span>, <span class="number">114</span>, <span class="number">120</span>,  <span class="number">35</span>,  <span class="number">37</span>,  <span class="number">96</span>,  <span class="number">76</span>,</span><br><span class="line">  <span class="number">121</span>,  <span class="number">33</span>,  <span class="number">35</span>, <span class="number">124</span>, <span class="number">101</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in"><span class="keyword">char</span></span>(<span class="built_in"><span class="keyword">char</span></span>(j)^i)==<span class="built_in"><span class="keyword">char</span></span>(p[i]))&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in"><span class="keyword">char</span></span>(j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;574y_h0m3|w34r_m45k&#125;</span><br></pre></td></tr></table></figure><p>P.S. 賽後發現 xor 算法可以直接算出 flag，不需要爆搜，比賽的時候沒想好繞了一圈…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">32</span>]=&#123;<span class="number">65</span>,  <span class="number">72</span>,  <span class="number">81</span>,  <span class="number">48</span>, <span class="number">127</span>,  <span class="number">48</span>,  <span class="number">49</span>,  <span class="number">51</span>, <span class="number">113</span>,  <span class="number">86</span>,</span><br><span class="line">   <span class="number">98</span>,  <span class="number">59</span>,  <span class="number">97</span>,  <span class="number">62</span>, <span class="number">114</span>, <span class="number">120</span>,  <span class="number">35</span>,  <span class="number">37</span>,  <span class="number">96</span>,  <span class="number">76</span>,</span><br><span class="line">  <span class="number">121</span>,  <span class="number">33</span>,  <span class="number">35</span>, <span class="number">124</span>, <span class="number">101</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in"><span class="keyword">char</span></span>(i^p[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyFirstCTF </tag>
            
            <tag> AIS3 </tag>
            
            <tag> Security </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 AIS3 Pre-exam Write Up</title>
      <link href="/2021/06/06/AIS3-2021-preexam/"/>
      <url>/2021/06/06/AIS3-2021-preexam/</url>
      
        <content type="html"><![CDATA[<p>今年第一次參加 AIS3 Pre-exam，之前有先看過一些別人寫的 Write Ups，發現今年的解題想法好像差蠻多的 TAT，今年成績第 71 名，算在錄取邊緣，期待明年我能表現更好囉!</p><p>這裡就來整理一下我賽中跟賽後有解出的題目吧!如果覺得有問題的話可以在留言區告訴我喔 XD</p><p>P.S. 之前賽後交出去的那份 Write Up 覺得太爛了不想貼出來，決定重打一份 w</p><p><img src="https://i.imgur.com/B8OCOaR.png"></p><h1 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h1><h2 id="Cat-Slayer-ᶠᵃᵏᵉ-Nekogoroshi"><a href="#Cat-Slayer-ᶠᵃᵏᵉ-Nekogoroshi" class="headerlink" title="Cat Slayer ᶠᵃᵏᵉ | Nekogoroshi"></a>Cat Slayer ᶠᵃᵏᵉ | Nekogoroshi</h2><blockquote><p>Author: splitline feat. Hojo Satoko</p></blockquote><p>題目給了一行 command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TERM=xterm-256color ssh -p 5566 h173@quiz.ais3.org</span><br></pre></td></tr></table></figure><p>把它拿到 Terminal 執行後可以發現他跳出了一個 Python 的執行畫面，用鍵盤可以輸入數字，輸入錯誤會鎖起來，因此可以用手動的輸入猜密碼，得到正確的密碼就可以解鎖 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Password: 202583045529</span><br></pre></td></tr></table></figure><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;H1n4m1z4w4_Sh0k0gun&#125;</span><br></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="Microcheese"><a href="#Microcheese" class="headerlink" title="Microcheese"></a>Microcheese</h2><blockquote><p>Author: toxicpie</p></blockquote><p>這題一樣給了 nc 跟 source code，但 source code 看了半天還是沒什麼想法，先去 nc 玩玩再說。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">$ nc quiz.ais3.org 10234</span><br><span class="line">+-------------------- welcome --------------------+</span><br><span class="line">| omg hi!                                         |</span><br><span class="line">|                                                 |</span><br><span class="line">| welcome to microchess, the minimal online chess |</span><br><span class="line">| platform.                                       |</span><br><span class="line">| i am a super powerful chess AI!                 |</span><br><span class="line">| can you win against me and get the flag?        |</span><br><span class="line">+---+--------------- main menu -------------------+</span><br><span class="line">| 0 | read the rules of the game                  |</span><br><span class="line">| 1 | start a new game against me                 |</span><br><span class="line">| 2 | load a saved game                           |</span><br><span class="line">| 3 | leave                                       |</span><br><span class="line">+---+---------------------------------------------+</span><br><span class="line">what would you like to do? 1</span><br><span class="line">+---+-------------- stones info ------------------+</span><br><span class="line">| 0 | ooooooooooooo                               |</span><br><span class="line">| 1 | ooooo                                       |</span><br><span class="line">| 2 | ooooooooooo                                 |</span><br><span class="line">| 3 | o                                           |</span><br><span class="line">| 4 | oooooooooooooooooooooooooooooo              |</span><br><span class="line">| 5 | ooooooo                                     |</span><br><span class="line">| 6 | ooooooooooooooooooooooooooo                 |</span><br><span class="line">+---+--------------- game menu -------------------+</span><br><span class="line">| 0 | make a move                                 |</span><br><span class="line">| 1 | save the current game and leave             |</span><br><span class="line">| 2 | resign the game                             |</span><br><span class="line">+---+---------------------------------------------+</span><br><span class="line">it&#39;s your turn to move! what do you choose? 0</span><br><span class="line">which pile do you choose? 3</span><br><span class="line">how many stones do you remove? 1</span><br><span class="line">+--------------------- moved ---------------------+</span><br><span class="line">| you removed 1 stones from pile 3                |</span><br><span class="line">+---+-------------- stones info ------------------+</span><br><span class="line">| 0 | ooooooooooooo                               |</span><br><span class="line">| 1 | ooooo                                       |</span><br><span class="line">| 2 | ooooooooooo                                 |</span><br><span class="line">| 3 | oooooooooooooooooooooooooooooo              |</span><br><span class="line">| 4 | ooooooo                                     |</span><br><span class="line">| 5 | ooooooooooooooooooooooooooo                 |</span><br><span class="line">+--------------------- moved ---------------------+</span><br><span class="line">| i removed 1 stones from pile 0                  |</span><br><span class="line">+---+-------------- stones info ------------------+</span><br><span class="line">| 0 | oooooooooooo                                |</span><br><span class="line">| 1 | ooooo                                       |</span><br><span class="line">| 2 | ooooooooooo                                 |</span><br><span class="line">| 3 | oooooooooooooooooooooooooooooo              |</span><br><span class="line">| 4 | ooooooo                                     |</span><br><span class="line">| 5 | ooooooooooooooooooooooooooo                 |</span><br><span class="line">+---+--------------- game menu -------------------+</span><br><span class="line">| 0 | make a move                                 |</span><br><span class="line">| 1 | save the current game and leave             |</span><br><span class="line">| 2 | resign the game                             |</span><br><span class="line">+---+---------------------------------------------+</span><br><span class="line">it&#39;s your turn to move! what do you choose?</span><br></pre></td></tr></table></figure><p>看起來是個遊戲，但玩了幾輪之後發現怎麼玩都輸，回去看 source code 發現<code>game.py</code>裡面好像有些東西。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    a simple Nim game with normal rules.</span></span><br><span class="line"><span class="string">    grundy&#x27;s theorem: if nim_sum() is zero, then the player to move has a</span></span><br><span class="line"><span class="string">    winning strategy. otherwise, the other player has a winning strategy.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stones = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_winning_game</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;generate a game such that the first player has a winning strategy&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.stones = []</span><br><span class="line">        xor_sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        piles = random.randint(<span class="number">6</span>, <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(piles):</span><br><span class="line">            self.stones.append(count := random.randint(<span class="number">1</span>, <span class="number">31</span>))</span><br><span class="line">            xor_sum ^= count</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> xor_sum == <span class="number">0</span>:</span><br><span class="line">            self.stones.append(random.randint(<span class="number">1</span>, <span class="number">31</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_losing_game</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;generate a game such that the second player has a winning strategy&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.stones = []</span><br><span class="line">        xor_sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        piles = random.randint(<span class="number">6</span>, <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(piles):</span><br><span class="line">            self.stones.append(count := random.randint(<span class="number">1</span>, <span class="number">31</span>))</span><br><span class="line">            xor_sum ^= count</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> xor_sum != <span class="number">0</span>:</span><br><span class="line">            self.stones.append(xor_sum)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_move</span>(<span class="params">self, pile: <span class="built_in">int</span>, count: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;makes a move, returns whether the move is legal&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pile <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(self.stones)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> count <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.stones[pile] + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        self.stones[pile] -= count</span><br><span class="line">        <span class="keyword">if</span> self.stones[pile] == <span class="number">0</span>:</span><br><span class="line">            self.stones.pop(pile)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nim_sum</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        xor_sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> count <span class="keyword">in</span> self.stones:</span><br><span class="line">            xor_sum ^= count</span><br><span class="line">        <span class="keyword">return</span> xor_sum</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ended</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        checks if the game has ended, i.e., the player has no more moves.</span></span><br><span class="line"><span class="string">        if True, the current player loses the game</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.stones) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;+---+-------------- stones info ------------------+&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> pile, count <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.stones):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;| <span class="subst">&#123;pile&#125;</span> | <span class="subst">&#123;<span class="string">&quot;o&quot;</span> * count:&lt;<span class="number">43</span>&#125;</span> |&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span>(<span class="params">self, game_str: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;loads a saved game from string&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.stones = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, game_str.split(<span class="string">&#x27;,&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;returns the current game as a string&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, self.stones))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AIPlayer</span>:</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    a perfect Nim player. if there exists a winning strategy for a game, this</span></span><br><span class="line"><span class="string">    player will always win.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_move</span>(<span class="params">self, game: Game</span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        if there is a winning strategy, returns a move that guarantees a win.</span></span><br><span class="line"><span class="string">        otherwise, returns a random move.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        nim_sum = game.nim_sum()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nim_sum == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># losing game, make a random move</span></span><br><span class="line">            pile = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(game.stones) - <span class="number">1</span>)</span><br><span class="line">            count = random.randint(<span class="number">1</span>, game.stones[pile])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># winning game, make a winning move</span></span><br><span class="line">            <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(game.stones):</span><br><span class="line">                target = v ^ nim_sum</span><br><span class="line">                <span class="keyword">if</span> target &lt; v:</span><br><span class="line">                    pile = i</span><br><span class="line">                    count = v - target</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (pile, count)</span><br></pre></td></tr></table></figure><p>從程式內容跟註解可以很明顯的看到，比賽的必勝關鍵便是盤面所有行棋數的 xor 為 0。但是程式裡面的 AIPlayer 便是利用這個規則，讓自己下完時的盤面保持 0 的狀態，果然是必勝訣竅阿…</p><p>原本這題賽中我應該是解不出來的，但是因為有一次把號碼按錯之後發現一個超級大的 bug，當我在選擇下一個步驟時，我按了<code>3</code>(不在按鈕內)，結果他就直接跳過了我的回合，讓盤面不再保持 xor 為 0 的狀態，接著就只需要讓最後一顆棋是由我拿走的就可以拿到 flag 了。</p><p>P.S. 這應該是因為沒有過濾其他輸入的問題…總之我拿到 flag 了 XD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">+---+--------------- game menu -------------------+</span><br><span class="line">| 0 | make a move                                 |</span><br><span class="line">| 1 | save the current game and leave             |</span><br><span class="line">| 2 | resign the game                             |</span><br><span class="line">+---+---------------------------------------------+</span><br><span class="line">it&#39;s your turn to move! what do you choose? 3</span><br><span class="line">+--------------------- moved ---------------------+</span><br><span class="line">| you removed 3 stones from pile 1                |</span><br><span class="line">+---+-------------- stones info ------------------+</span><br><span class="line">| 0 | o                                           |</span><br><span class="line">| 1 | o                                           |</span><br><span class="line">+--------------------- moved ---------------------+</span><br><span class="line">| i removed 1 stones from pile 1                  |</span><br><span class="line">+---+-------------- stones info ------------------+</span><br><span class="line">| 0 | o                                           |</span><br><span class="line">+---+--------------- game menu -------------------+</span><br><span class="line">| 0 | make a move                                 |</span><br><span class="line">| 1 | save the current game and leave             |</span><br><span class="line">| 2 | resign the game                             |</span><br><span class="line">+---+---------------------------------------------+</span><br><span class="line">it&#39;s your turn to move! what do you choose? 0</span><br><span class="line">which pile do you choose? 0</span><br><span class="line">how many stones do you remove? 1</span><br><span class="line">+---------------- congratulations ----------------+</span><br><span class="line">| you are a true grandmaster of chess! here is    |</span><br><span class="line">| the flag for you:                               |</span><br><span class="line">| AIS3&#123;5._e3_b5_6._a4_Bb4_7._Bd2_a5_8._axb5_Bxc3&#125; |</span><br><span class="line">+-------------------------------------------------+</span><br></pre></td></tr></table></figure><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;5._e3_b5_6._a4_Bb4_7._Bd2_a5_8._axb5_Bxc3&#125;</span><br></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="ⲩⲉⲧ-ⲁⲛⲟⲧⲏⲉs-𝓵ⲟ𝓰ⲓⲛ-ⲣⲁ𝓰ⲉ"><a href="#ⲩⲉⲧ-ⲁⲛⲟⲧⲏⲉs-𝓵ⲟ𝓰ⲓⲛ-ⲣⲁ𝓰ⲉ" class="headerlink" title="ⲩⲉⲧ ⲁⲛⲟⲧⲏⲉꞅ 𝓵ⲟ𝓰ⲓⲛ ⲣⲁ𝓰ⲉ"></a>ⲩⲉⲧ ⲁⲛⲟⲧⲏⲉꞅ 𝓵ⲟ𝓰ⲓⲛ ⲣⲁ𝓰ⲉ</h2><blockquote><p>Author: splitline</p></blockquote><p>這題給了一個很難按的題目，連進去之後發現是一個 login 畫面，還有一個 sauce link，先點進去看原始碼，發現他是一個 json 資料庫，裡面存有登入的資訊:</p><p><img src="https://i.imgur.com/zv1wxp9.png"></p><p>用了 guest 成功登入，但沒有 flag。接著用 admin 試試，因為 os.environ.get()的意思是如果 key 不存在就用後面的值來代替，但是還是登入失敗了。</p><p>接著觀察輸入後的行為:</p><p><img src="https://i.imgur.com/etLTbQM.png"></p><p>他把我們的輸入塞進了<code>%s</code>的地方包裝成 json 格式，但他並沒有過濾<code>%s</code>的內容，所以可以從輸入動手腳。</p><p>從上面可以看出來，他把新輸入的使用者 showflag 參數一律設為$false$，所以我們拿不到 flag。但如果我們在輸入中塞入 json 格式的文字，他就會被包到這個 json 裡面送進去執行。</p><p>但因為我們必須構造一個不存在於原 database 的使用者，而 json 找不到 username 會回傳$null$，因此我們將 password 也設為$null$即可。</p><p>構造 payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username payload: M3t30r&quot;, &quot;showflag&quot;: true, &quot;username&quot;: &quot;m3t30r</span><br><span class="line">password payload: M3T30r&quot;, &quot;password&quot;: null, &quot;username&quot;: &quot;M3T30R</span><br></pre></td></tr></table></figure><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;&#x2F;r&#x2F;badUIbattles?!?!&#125;</span><br></pre></td></tr></table></figure><h2 id="HaaS"><a href="#HaaS" class="headerlink" title="HaaS"></a>HaaS</h2><blockquote><p>Author: anonymous</p></blockquote><p>連進這題的網址後會是/haas 的分頁，但會顯示出 405 Method Not Allowed Error<br><img src="https://i.imgur.com/26qcGuM.png"></p><p>稍微在網頁中翻找一下會發現根目錄裡面是一個”HealthCheck as a Service”網站，有一個可以輸入網址的欄位，用 F12 翻一下還可以發現一個 hidden 的 status code 參數。</p><p><img src="https://i.imgur.com/1PiS3kH.png"></p><p>一開始試了一些 Command Injection 之類的東西，但發現好像不太行。後來打開 Hint 裡面寫了<code>SSRF</code>，就開始往 localhost 的方向走了，但是如果直接連進 localhost 的 IP(<a href="https://127.0.0.1/)%E8%B7%9Fdomain%E6%9C%83%E7%99%BC%E7%8F%BE%E4%BB%96%E8%A2%AB%E9%81%8E%E6%BF%BE%E4%BA%86">https://127.0.0.1/)跟domain會發現他被過濾了</a>:</p><p><img src="https://i.imgur.com/t8TKijf.png"></p><p>於是開始嘗試 SSRF 的 bypass 方法，這裡嘗試了幾個發現<code>https://127.000000.000000.1/</code>(要注意它只吃絕對網址)這個 bypass 可以成功讓 haas 顯示<code>&quot;Alive&quot;</code>，但我們必須拿到裡面的內容，所以將 status code 改掉讓 haas 噴出 Error 後即可拿到 flag。</p><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QQ我忘了，然後題目機把localhost關掉了TAT</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Microchip"><a href="#Microchip" class="headerlink" title="Microchip"></a>Microchip</h2><blockquote><p>Author: toxicpie</p></blockquote><p>這題給了一個 microchip.cpp、output.txt 與 python.h 檔，打開觀察後可以發現它利用匯入 python.h 的 library 進行 python 語法的混淆，所以應只需要觀察程式邏輯即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;python.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def track(name, id) -&gt; str ??                                                   &#123;</span><br><span class="line"></span><br><span class="line">    if len(name) % 4 == 0 ??                                                    )&#123;</span><br><span class="line">        padded = name + <span class="string">&quot;4444&quot;</span>                                                  ;&#125;</span><br><span class="line">    elif len(name) % 4 == 1 ??                                                  )&#123;</span><br><span class="line">        padded = name + <span class="string">&quot;333&quot;</span>                                                   ;&#125;</span><br><span class="line">    elif len(name) % 4 == 2 ??                                                  )&#123;</span><br><span class="line">        padded = name + <span class="string">&quot;22&quot;</span>                                                    ;&#125;</span><br><span class="line">    elif len(name) % 4 == 3 ??                                                  )&#123;</span><br><span class="line">        padded = name + <span class="string">&quot;1&quot;</span>                                                     ;&#125;</span><br><span class="line"></span><br><span class="line">    keys = <span class="built_in">list</span>()                                                               ;</span><br><span class="line">    temp = id                                                                   ;</span><br><span class="line">    for i in range(4) ??                                                        )&#123;</span><br><span class="line">        keys.<span class="built_in">append</span>(temp % <span class="number">96</span>)                                                  ;</span><br><span class="line">        temp = <span class="built_in"><span class="keyword">int</span></span>(temp / <span class="number">96</span>)                                                   ;&#125;</span><br><span class="line"></span><br><span class="line">    result = <span class="string">&quot;&quot;</span>                                                                 ;</span><br><span class="line">    for i in range(0, len(padded), 4) ??                                        )&#123;</span><br><span class="line"></span><br><span class="line">        nums = <span class="built_in">list</span>()                                                           ;</span><br><span class="line">        for j in range(4) ??                                                    )&#123;</span><br><span class="line">            num = <span class="built_in">ord</span>(padded[i + j]) - <span class="number">32</span>                                       ;</span><br><span class="line">            num = (num + keys[j]) % <span class="number">96</span>                                          ;</span><br><span class="line">            nums.<span class="built_in">append</span>(num + <span class="number">32</span>)                                               ;&#125;</span><br><span class="line"></span><br><span class="line">        result += <span class="built_in">chr</span>(nums[<span class="number">3</span>])                                                  ;</span><br><span class="line">        result += <span class="built_in">chr</span>(nums[<span class="number">2</span>])                                                  ;</span><br><span class="line">        result += <span class="built_in">chr</span>(nums[<span class="number">1</span>])                                                  ;</span><br><span class="line">        result += <span class="built_in">chr</span>(nums[<span class="number">0</span>])                                                  ;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result                                                               ;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main() -&gt; int ??                                                            &#123;</span><br><span class="line"></span><br><span class="line">    name = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).<span class="built_in">read</span>().<span class="built_in">strip</span>()                                 ;</span><br><span class="line">    id = <span class="built_in"><span class="keyword">int</span></span>(<span class="built_in">input</span>(<span class="string">&quot;key = &quot;</span>))                                                   ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result is:&quot;</span>, <span class="built_in">track</span>(name, id))                                        ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>                                                                    ;&#125;</span><br></pre></td></tr></table></figure><p>下面是 output.txt 的內容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result is:&#x3D;Js&amp;;*A&#96;odZHi&#39;&gt;D&#x3D;Js&amp;#i-DYf&gt;Uy&#39;yuyfyu&lt;)Gu</span><br></pre></td></tr></table></figure><p>從程式中可以發現他先把 flag 長度補成 4 的倍數後，用一組四個 key 來對 flag 進行一次 4 字元的運算。但是，我們沒有 key 也沒有 flag，要怎麼逆運算回去?</p><p>後來發現我們可以利用 flag format<code>AIS3&#123;...&#125;</code>來解決這件事，先用前四個已知 flag 字元搭配 output 算出 key 之後，我們就能利用 output 推回 flag 了。</p><p>值得注意的是，他把 output 四個逆過來輸出，所以我們先把 output 逆回來比較容易計算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;sJ&#x3D;&#96;A*;HZdoD&gt;&#39;i&amp;sJ&#x3D;D-i#U&gt;fYuy&#39;yuyfyuG)&lt;</span><br></pre></td></tr></table></figure><p>用<code>AIS3</code>與<code>&amp;sJ=</code>可以算出四個 key 的值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;69,42,87,10&#125;</span><br></pre></td></tr></table></figure><p>有了 output 與 key 就能寫程式來逆推 flag 了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s=<span class="string">&quot;&amp;sJ=`A*;HZdoD&gt;&#x27;i&amp;sJ=D-i#U&gt;fYuy&#x27;yuyfyuG)&lt;&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> k[<span class="number">4</span>]=&#123;<span class="number">69</span>,<span class="number">42</span>,<span class="number">87</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">40</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">48</span>;;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in"><span class="keyword">char</span></span>((((j<span class="number">-32</span>)+k[i%<span class="number">4</span>])%<span class="number">96</span>)+<span class="number">32</span>)==s[i])&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in"><span class="keyword">char</span></span>(j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>P.S. 從我們的結果可以發現 flag 一開始塞了”22”到後面喔~XD</p><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;w31c0me_t0_AIS3_cryptoO0O0o0Ooo0&#125;</span><br></pre></td></tr></table></figure><h2 id="ReSident-evil-villAge"><a href="#ReSident-evil-villAge" class="headerlink" title="ReSident evil villAge"></a>ReSident evil villAge</h2><blockquote><p>Author: Kuruwa</p></blockquote><p>這題給了一個 nc 跟 source code，打開 source code 看一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> self.request.recv(<span class="number">1024</span>).strip()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self, msg</span>):</span></span><br><span class="line">self.request.sendall(msg + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">privkey = RSA.generate(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">n = privkey.n</span><br><span class="line">e = privkey.e</span><br><span class="line"></span><br><span class="line">self.send(<span class="string">b&#x27;Welcome to ReSident evil villAge, sign the name &quot;Ethan Winters&quot; to get the flag.&#x27;</span>)</span><br><span class="line">self.send(<span class="string">b&#x27;n = &#x27;</span> + <span class="built_in">str</span>(n).encode())</span><br><span class="line">self.send(<span class="string">b&#x27;e = &#x27;</span> + <span class="built_in">str</span>(e).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">self.request.sendall(<span class="string">b&#x27;1) sign\n2) verify\n3) exit\n&#x27;</span>)</span><br><span class="line">option = self.recv()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> option == <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">self.request.sendall(<span class="string">b&#x27;Name (in hex): &#x27;</span>)</span><br><span class="line">msg = unhexlify(self.recv())</span><br><span class="line"><span class="keyword">if</span> msg == <span class="string">b&#x27;Ethan Winters&#x27;</span> <span class="keyword">or</span> bytes_to_long(msg) &gt;= n:  <span class="comment"># msg+k*n not allowed</span></span><br><span class="line">self.send(<span class="string">b&#x27;Nice try!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sig = <span class="built_in">pow</span>(bytes_to_long(msg), privkey.d, n)     <span class="comment"># <span class="doctag">TODO:</span> Apply hashing first to prevent forgery</span></span><br><span class="line">self.send(<span class="string">b&#x27;Signature: &#x27;</span> + <span class="built_in">str</span>(sig).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> option == <span class="string">b&#x27;2&#x27;</span>:</span><br><span class="line">self.request.sendall(<span class="string">b&#x27;Signature: &#x27;</span>)</span><br><span class="line">sig = <span class="built_in">int</span>(self.recv())</span><br><span class="line">verified = (<span class="built_in">pow</span>(sig, e, n) == bytes_to_long(<span class="string">b&#x27;Ethan Winters&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> verified:</span><br><span class="line">self.send(<span class="string">b&#x27;AIS3&#123;THIS_IS_A_FAKE_FLAG&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.send(<span class="string">b&#x27;Well done!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkingServer</span>(<span class="params">socketserver.ForkingTCPServer, socketserver.TCPServer</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">42069</span></span><br><span class="line"><span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">server = ForkingServer((HOST, PORT), Task)</span><br><span class="line">server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">server.serve_forever()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>從裡面可以發現 verify 的部分會檢查計算的結果是否等於<code>bytes_to_long(b&#39;Ethan Winters&#39;)</code>，而它有給定 n 與 e，因此原本的想法是爆搜，但發現搜不到於是放棄這條路。</p><p>再來看看有沒有其他的後門可以繞。sign 的部分，它會把你的註冊用 d 計算後存為 signature。用 RSA 的小常識，用 d 再用 e 運算後會把原本的明文算回來，但它前面出現了一個限制-<strong>要用 16 進位輸入而且不能註冊 Ethan Winters 的值</strong>。</p><p>在這裡要怎麼繞過呢?直觀的想法便是在前面加 00，因為這樣數字運算的時候會把 00 省略，但是字串比較時會與 Ethan Winters 的值不同，所以用 Ethan Winters 的 16 進位值再加上 00 前綴試試看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">&quot;Ethan Winters&quot;</span>.encode().hex()</span><br><span class="line"><span class="string">&#x27;457468616e2057696e74657273&#x27;</span></span><br></pre></td></tr></table></figure><p>把<code>00457468616e2057696e74657273</code>丟進去註冊，再把跑出來的<code>Signature</code>verify 即可拿到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ nc quiz.ais3.org 42069</span><br><span class="line">Welcome to ReSident evil villAge, sign the name &quot;Ethan Winters&quot; to get the flag.</span><br><span class="line">n &#x3D; 116446349250477461211548564037305096646246352712613922877939621221682086442262006076658058243799666178199942844412251167013582517469698767681352409472676329468186602987766214457609857069612827869171818746620035374912701350547179213366848809313278051695960906542268549406826272373673111354786397335987091196949</span><br><span class="line">e &#x3D; 65537</span><br><span class="line">1) sign</span><br><span class="line">2) verify</span><br><span class="line">3) exit</span><br><span class="line">1</span><br><span class="line">Name (in hex): 00457468616e2057696e74657273</span><br><span class="line">Signature: 81461102639376645458445563890933604042666832496108067724180262424539703394619135196334363979456757148465714312599695970577392038142353089971541912561007212572874317390985050129115895139824645075534050013217923053352965259741321376550049801845665852962177362515169292380016928834541247529513691701369654301864</span><br><span class="line">1) sign</span><br><span class="line">2) verify</span><br><span class="line">3) exit</span><br><span class="line">2</span><br><span class="line">Signature: 81461102639376645458445563890933604042666832496108067724180262424539703394619135196334363979456757148465714312599695970577392038142353089971541912561007212572874317390985050129115895139824645075534050013217923053352965259741321376550049801845665852962177362515169292380016928834541247529513691701369654301864</span><br><span class="line">AIS3&#123;R3M383R_70_HAsh_7h3_M3Ssa93_83F0r3_S19N1N9&#125;</span><br></pre></td></tr></table></figure><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;R3M383R_70_HAsh_7h3_M3Ssa93_83F0r3_S19N1N9&#125;</span><br></pre></td></tr></table></figure><h2 id="Republic-of-South-Africa"><a href="#Republic-of-South-Africa" class="headerlink" title="Republic of South Africa"></a>Republic of South Africa</h2><blockquote><p>Author: Kuruwa</p></blockquote><p>這題給了一個 chall.py 與 output.txt，先來看看他的 chall.py 裡面做了什麼事情。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.get_context().precision = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collision</span>(<span class="params">m1, v1, m2, v2</span>):</span></span><br><span class="line"><span class="keyword">return</span> v1*(m1-m2)/(m1+m2) + v2*(<span class="number">2</span>*m2)/(m1+m2), v1*(<span class="number">2</span>*m1)/(m1+m2) + v2*(m2-m1)/(m1+m2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span>(<span class="params">digits</span>):</span>     <span class="comment"># Warning: slow implementation</span></span><br><span class="line">m1 = <span class="number">1</span></span><br><span class="line">m2 = <span class="number">10</span> ** (<span class="number">2</span>*digits-<span class="number">2</span>)</span><br><span class="line">v1 = gmpy2.mpfr(<span class="number">0</span>)</span><br><span class="line">v2 = gmpy2.mpfr(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span>       <span class="comment"># p+q</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">abs</span>(v1) &gt; v2 <span class="keyword">or</span> v1 &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> v1 &lt; <span class="number">0</span>:</span><br><span class="line">v1 = -v1</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">v1, v2 = collision(m1, v1, m2, v2)</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">p = random.randint(count//<span class="number">3</span>, count//<span class="number">2</span>)</span><br><span class="line">q = count - p</span><br><span class="line"><span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, q = keygen(<span class="number">153</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e =&#x27;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, <span class="built_in">pow</span>(m, e, n))</span><br></pre></td></tr></table></figure><p>可以發現他用一種神奇的算法來產出 RSA 參數，那就來看看他是怎麼計算的吧。</p><p>一開始真的看不太出來上面的計算是什麼意思，卡了好一陣子。後來又回頭看看題目，collision 是指碰撞，再回頭看看 source code，發現他很好心的把變數設成 m1 跟 v1 這種型態，分別代表了質量和速度!</p><p>而 collision function 裡面傳回的便是一維碰撞後兩個物體分別的速度公式，從這裡可以確定碰撞的想法是正確的了。</p><p>其中<code>v1</code>&lt;0 時，程式會將它變成相反數，就像撞上了牆壁無能量損失的反彈。因此綜合起來，兩個物體在進行碰撞且 m1 方有一面牆壁，而這時候看看 count 變數，它每碰撞一次便會+1，因此是計算碰撞次數，從這裡直接聯想到物理碰撞的著名經典問題:</p><p><a href="https://www.youtube.com/watch?v=Un7mK05b9oA">從物理碰撞得出圓周率$\pi$</a></p><p>得到這個結論之後就容易許多了，它給定質量是$1:10^{(2\times153-2)}$，因此可以得到 count 便是圓周率的前 154 位(推論過程詳見影片)，而從裡面可以得到 count=p+q，所以我們便得到了<code>p+q=314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848</code>這個條件。</p><p>那我們需要把 p 跟 q 解出來嗎?不需要!分別得到 p,q 是因為我們需要計算$\phi(n)$的值，但現在我們有$n=p\times q$與$p+q$兩個條件了，這樣$\phi(n)=(p-1)(q-1)=p\times q-(p+q)+1$便可以計算了。</p><p>接下來就是用簡單的 RSA 概念來解決它囉!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">23662270311503602529211462628663973377651035055221337186547659666520360329842954292759496973737109678655075242892199643594552737098393308599593056828393773327639809644570618472781338585802514939812387999523164606025662379300143159103239039862833152034195535186138249963826772564309026532268561022599227047</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">11458615427536252698065643586706850515055080432343893818398610010478579108516179388166781637371605857508073447120074461777733767824330662610330121174203247272860627922171793234818603728793293847713278049996058754527159158251083995933600335482394024095666411743953262490304176144151437205651312338816540536</span></span><br><span class="line">k = <span class="number">314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848</span></span><br><span class="line"></span><br><span class="line">phi = n-k+<span class="number">1</span></span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br></pre></td></tr></table></figure><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;jsYwFizhncE&#125;</span><br></pre></td></tr></table></figure><p>原來 flag 裡面給了一個碰撞的影片啊~有趣的題目 XD</p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Piano"><a href="#Piano" class="headerlink" title="Piano"></a>Piano</h2><blockquote><p>Author: CSY54</p></blockquote><p>這題給了一個 zip，裡面包了一堆額外的設定檔之類的東西。先來執行 piano.exe，但它跳出了一個 alert 要我先去下載.NET 的 framework，這為我在下一步解題時開了一道曙光。</p><p>打開之後，它是一個 GUI 琴面，但是…不知道要彈什麼。看起來應該不能從這裡下手，那應該就是要 reverse 了。</p><p><img src="https://i.imgur.com/4eYCFcw.png"></p><p>先用 IDA Pro 打開.exe 看看，但沒有發現什麼可以用的東西。後來想到一開始顯示的<code>.NET</code>，於是上網查了一下關鍵字<code>.NET reverse</code>，在<a href="https://pelock.medium.com/reverse-engineering-tools-for-net-applications-a28275f185b4">這個網站</a>裡面發現了一個叫<code>dnSpy</code>的工具，可以對.NET 下的 framework 進行 reverse。那就來用用它吧!</p><p>用 dnSpy 打開 piano.exe 沒有發現東西，但打開 piano.dll 之後翻找了一下，發現兩個特別可疑的 function<code>isValid()</code>與<code>nya()</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// piano.Piano</span></span><br><span class="line"><span class="comment">// Token: 0x06000003 RID: 3 RVA: 0x00002220 File Offset: 0x00000420</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">isValid</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">14</span>,</span><br><span class="line"><span class="number">17</span>,</span><br><span class="line"><span class="number">20</span>,</span><br><span class="line"><span class="number">21</span>,</span><br><span class="line"><span class="number">22</span>,</span><br><span class="line"><span class="number">21</span>,</span><br><span class="line"><span class="number">19</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">12</span>,</span><br><span class="line"><span class="number">6</span>,</span><br><span class="line"><span class="number">11</span>,</span><br><span class="line"><span class="number">16</span>,</span><br><span class="line"><span class="number">15</span>,</span><br><span class="line"><span class="number">14</span></span><br><span class="line">&#125;;</span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; list2 = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">-3</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">-1</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">6</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">-5</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.notes[i] + <span class="keyword">this</span>.notes[(i + <span class="number">1</span>) % <span class="number">14</span>] != list[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.notes[i] - <span class="keyword">this</span>.notes[(i + <span class="number">1</span>) % <span class="number">14</span>] != list2[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// piano.Piano</span></span><br><span class="line"><span class="comment">// Token: 0x06000004 RID: 4 RVA: 0x0000236C File Offset: 0x0000056C</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">nya</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">70</span>,</span><br><span class="line"><span class="number">78</span>,</span><br><span class="line"><span class="number">89</span>,</span><br><span class="line"><span class="number">57</span>,</span><br><span class="line"><span class="number">112</span>,</span><br><span class="line"><span class="number">60</span>,</span><br><span class="line"><span class="number">125</span>,</span><br><span class="line"><span class="number">96</span>,</span><br><span class="line"><span class="number">103</span>,</span><br><span class="line"><span class="number">104</span>,</span><br><span class="line"><span class="number">50</span>,</span><br><span class="line"><span class="number">109</span>,</span><br><span class="line"><span class="number">87</span>,</span><br><span class="line"><span class="number">115</span>,</span><br><span class="line"><span class="number">112</span>,</span><br><span class="line"><span class="number">54</span>,</span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="number">97</span>,</span><br><span class="line"><span class="number">103</span>,</span><br><span class="line"><span class="number">56</span>,</span><br><span class="line"><span class="number">85</span>,</span><br><span class="line"><span class="number">101</span>,</span><br><span class="line"><span class="number">56</span>,</span><br><span class="line"><span class="number">119</span>,</span><br><span class="line"><span class="number">119</span>,</span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="number">59</span>,</span><br><span class="line"><span class="number">88</span>,</span><br><span class="line"><span class="number">50</span>,</span><br><span class="line"><span class="number">48</span>,</span><br><span class="line"><span class="number">62</span>,</span><br><span class="line"><span class="number">120</span>,</span><br><span class="line"><span class="number">84</span>,</span><br><span class="line"><span class="number">58</span>,</span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="number">86</span>,</span><br><span class="line"><span class="number">74</span>,</span><br><span class="line"><span class="number">92</span>,</span><br><span class="line"><span class="number">54</span>,</span><br><span class="line"><span class="number">96</span>,</span><br><span class="line"><span class="number">60</span>,</span><br><span class="line"><span class="number">117</span>,</span><br><span class="line"><span class="number">119</span>,</span><br><span class="line"><span class="number">122</span></span><br><span class="line">&#125;;</span><br><span class="line">List&lt;<span class="built_in">char</span>&gt; list2 = <span class="keyword">new</span> List&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">list2.Add((<span class="built_in">char</span>)(list[i] ^ <span class="keyword">this</span>.notes[i % <span class="keyword">this</span>.notes.Count]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">string</span>(list2.ToArray());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>觀察一下兩個$function$的關係，發現利用<code>isValid()</code>的條件可以算出 notes 的值，然後送到<code>nya()</code>可以把 flag 計算出來，那就寫個程式來實作就完成了。</p><p>先手動算出 notes 的值(很簡單啦不需要程式 XD):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;7,7,10,10,11,11,10,9,9,3,3,8,8,7,7&#125;</span><br></pre></td></tr></table></figure><p>接著套入<code>nya()</code>邏輯:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k[<span class="number">100</span>]=&#123;   <span class="number">70</span>,</span><br><span class="line"><span class="number">78</span>,</span><br><span class="line"><span class="number">89</span>,</span><br><span class="line"><span class="number">57</span>,</span><br><span class="line"><span class="number">112</span>,</span><br><span class="line"><span class="number">60</span>,</span><br><span class="line"><span class="number">125</span>,</span><br><span class="line"><span class="number">96</span>,</span><br><span class="line"><span class="number">103</span>,</span><br><span class="line"><span class="number">104</span>,</span><br><span class="line"><span class="number">50</span>,</span><br><span class="line"><span class="number">109</span>,</span><br><span class="line"><span class="number">87</span>,</span><br><span class="line"><span class="number">115</span>,</span><br><span class="line"><span class="number">112</span>,</span><br><span class="line"><span class="number">54</span>,</span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="number">97</span>,</span><br><span class="line"><span class="number">103</span>,</span><br><span class="line"><span class="number">56</span>,</span><br><span class="line"><span class="number">85</span>,</span><br><span class="line"><span class="number">101</span>,</span><br><span class="line"><span class="number">56</span>,</span><br><span class="line"><span class="number">119</span>,</span><br><span class="line"><span class="number">119</span>,</span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="number">59</span>,</span><br><span class="line"><span class="number">88</span>,</span><br><span class="line"><span class="number">50</span>,</span><br><span class="line"><span class="number">48</span>,</span><br><span class="line"><span class="number">62</span>,</span><br><span class="line"><span class="number">120</span>,</span><br><span class="line"><span class="number">84</span>,</span><br><span class="line"><span class="number">58</span>,</span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="number">86</span>,</span><br><span class="line"><span class="number">74</span>,</span><br><span class="line"><span class="number">92</span>,</span><br><span class="line"><span class="number">54</span>,</span><br><span class="line"><span class="number">96</span>,</span><br><span class="line"><span class="number">60</span>,</span><br><span class="line"><span class="number">117</span>,</span><br><span class="line"><span class="number">119</span>,</span><br><span class="line"><span class="number">122</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n[<span class="number">15</span>]=&#123;<span class="number">7</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in"><span class="keyword">char</span></span>(k[i]^n[i%<span class="number">14</span>]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;7wink1e_tw1nkl3_l1ttl3_574r_1n_C_5h4rp&#125;</span><br></pre></td></tr></table></figure><p>P.S. 所以用 C#調彈小星星真的可以拿到 flag 喔~XD<br><img src="https://i.imgur.com/xU0s8Qn.png"></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AIS3 </tag>
            
            <tag> Security </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 1st YMMC 營後整理 Day I</title>
      <link href="/2021/06/04/YMMC-1/"/>
      <url>/2021/06/04/YMMC-1/</url>
      
        <content type="html"><![CDATA[<p>在高一暑假時，我參加了 2020 第一屆陽明醫學營的營隊，在裡面學習到一般醫學生所會面臨的課程以及挑戰，也十分喜歡醫學系中的氛圍，可以學習更多有關於醫學的知識，並且將這些知識實際融會貫通，進而幫助病人們。醫學是一門與生活息息相關的學問，關係著生老病死，用自己的能力去盡可能的幫助他人，這種感受是令我感到心生嚮往的。</p><p>除此之外，醫學系的學長姐們更是令我十分驚豔。他們往往身懷多技，從熱舞、美術、戲劇、音樂……各種才能的展現毫不遜色於專業人員，他們利用興趣所培養起的，不僅是醫學的專業知識，更在專業之餘擁有了更多豐富自己人生的技能，這項一直是我的夢想，也十分希望讓這份熱忱成為我的生活。</p><p>接下來就來整理一些在營隊中學到的東西吧!</p><h1 id="安寧照護"><a href="#安寧照護" class="headerlink" title="安寧照護"></a>安寧照護</h1><blockquote><p>講師 : 國立陽明大學護理學系助理教授 黃淑鶴</p></blockquote><p>安寧療護，指的是<strong>提供給所罹患的疾病對於治癒性療法已經沒有反應的病人(with life threatening illness)，積極的全方位照顧</strong>，其目的並不在於治癒，而是讓一位病人帶著尊嚴與安寧的照顧之下，安然地走完人生的路程。</p><h2 id="護理照顧"><a href="#護理照顧" class="headerlink" title="護理照顧"></a>護理照顧</h2><p>在醫師診治的時間(包括手術)之外，其餘時間大多都是護理師在扮演陪伴以及照顧的角色，甚至於在醫師診治時提供有關於病人的資訊以利於醫師診斷。</p><p>護理師主要的職責如下:</p><ol><li>給予病人陪伴</li><li>處理生活照顧與醫療</li><li>情緒支持</li><li>生活指導</li></ol><p>由於處在病症末期的病人，往往無法精確的表達出自己的不適狀況，故此時便需要護理師進行協助以及支持。</p><p>護理師所需具備的專業能力:</p><ol><li>護理專業知識</li><li>正確問題診斷</li><li>照護提供，緩解病人不適</li></ol><h2 id="身體照護"><a href="#身體照護" class="headerlink" title="身體照護"></a>身體照護</h2><ul><li>疼痛</li><li>口腔破損、進食與吞嚥障礙、嗆咳</li><li>腸胃道阻塞、腹脹</li><li>呼吸系統障礙:呼吸喘、痰多、呼吸器</li><li>傷口、管路照護、壓傷照顧</li><li>移動、翻身擺位</li><li>口腔清潔</li><li>身體清潔、會陰清潔</li><li>排便、排尿功能障礙</li><li>遺體照顧</li></ul><h2 id="安寧照護問題"><a href="#安寧照護問題" class="headerlink" title="安寧照護問題"></a>安寧照護問題</h2><ol><li>病人與家屬對臨終的知識不足或不正確</li><li><strong>家屬的主權超過病人</strong></li><li>醫療專業欠缺面對與處理末期病人身心不適的能力</li><li><strong>無效醫療</strong></li><li>國人缺乏預立遺囑的習慣:造成不必要的糾紛</li></ol><p>國內許多的案例顯示出，許多沒有自主能力的病患，醫療行為反而由家屬所掌握，而家屬往往又沒有足夠的醫療背景知識，因此常常質疑醫師所做出的專業判斷，導致延誤治療時間，同時病患也受苦。</p><h2 id="拒絕無效醫療"><a href="#拒絕無效醫療" class="headerlink" title="拒絕無效醫療"></a>拒絕無效醫療</h2><p>使用”非常”手段延命，僅是加長死亡的過程。在人生的最後階段靜靜的離開，才是對生命，也是對自己最好的安排。</p><ul><li><p>導演吳念真</p><blockquote><p>豁達面對，就是對生命的最大尊重，只有學習接受死亡，才能在臨終那刻安詳離開。<br>子孫未來不用掃墓，心裡有我就行了。</p></blockquote></li><li><p>加護病房醫師</p><blockquote><p>我是醫師，時候到了，我也絕不要被插鼻胃管!</p></blockquote></li></ul><h2 id="安寧護理的真諦"><a href="#安寧護理的真諦" class="headerlink" title="安寧護理的真諦"></a>安寧護理的真諦</h2><p>護理:</p><ol><li>尊重生命，不縮短也不拖延</li><li>提供舒適的照護</li><li>幫助病人完成四道人生，無論生死皆無憾。(道謝、道愛、道歉、道別)</li></ol><p><strong>執行者需要以”專業知能”為基礎，以耐心、包容、智慧和技術提供照護。</strong><br>這不僅是一份專業工作，也是人生的志業。</p><p><img src="https://i.imgur.com/vHHRZvf.png"></p><p>南丁格爾對護理專業的肯定:<br>護理專業價值多是在人最脆弱需要協助的時候顯現。社會上不缺少一流的醫師，但缺少一流的護士。</p><p>護理師，加油!</p><h1 id="消化潰瘍"><a href="#消化潰瘍" class="headerlink" title="消化潰瘍"></a>消化潰瘍</h1><blockquote><p>講師 : 台北榮民總醫院 彭清霖醫師</p></blockquote><p>這堂課主要探討消化性潰瘍的成因、診斷、治療與幽門螺旋桿菌(helicobacter pylori)發現、診斷、治療與對消化醫學史的影響。</p><h2 id="胃潰瘍-Peptic-Ulcer-Disease"><a href="#胃潰瘍-Peptic-Ulcer-Disease" class="headerlink" title="胃潰瘍(Peptic Ulcer Disease)"></a>胃潰瘍(Peptic Ulcer Disease)</h2><blockquote><p>Definition :<br>A hole in the gut lining of the stomach, duodenum, or esophagus.<br>在胃壁、食道或十二指腸中有一個洞。<br>An ulcer occurs when the lining of these organs is corroded by the acidic digestive juices which are secreted by the stomach cells.<br>當這些器官的內壁被胃細胞分泌的酸性消化液腐蝕時，就會發生潰瘍。</p></blockquote><p>胃壁的結構如下:<br><img src="https://i.imgur.com/0sTBCLr.jpg"><br>由上而下分別為黏膜層(mucosa)、黏膜下層(submucosa)、肌肉層(muscle layers)與漿膜層(serosa)。若胃潰瘍穿破了漿膜層便會造成胃穿孔，需要緊急手術。</p><p>潰瘍發生的時機:平衡破壞</p><ul><li>外來的攻擊因子，如胃酸過多、膽汁逆流、酒精或藥物等。</li><li>防禦能力缺損，如黏膜發炎、黏液分泌不足、局部血液循環不足等。</li></ul><h2 id="柯霍氏法則"><a href="#柯霍氏法則" class="headerlink" title="柯霍氏法則"></a>柯霍氏法則</h2><p>羅伯·柯霍(Robert Koch)(1843/12/11-1910/5/27)是一名德國醫師與生物學家，為細菌學始祖之一，與路易·巴斯德共享盛名。1905 因肺結核的研究而獲得諾貝爾生理醫學獎。</p><p>他發現了炭疽桿菌、結核桿菌與霍亂弧菌，並發展出一套判斷疾病病原體的依據-柯霍氏法則。</p><p>其內容如下:</p><ol><li>病體罹病部位經常可以找到大量病原體，但在健康活體中找不到病原體。</li><li>病原菌可被分離並在培養基中進行培養，並記錄各項特徵。</li><li>純粹培養的病原菌應該接種至與病株相同品種的健康植株，並產生與病株相同的病徵。</li><li>從接種的病株上以相同的分離方法應能在分離出病原，且其特徵與由原病株分離者應該完全相同。</li></ol><h2 id="潰瘍成因"><a href="#潰瘍成因" class="headerlink" title="潰瘍成因"></a>潰瘍成因</h2><p>1910 年時，Schwartz 提出”無胃酸即無潰瘍”一論，成為了當代潰瘍治療的準則，但這也限制了當代發現細菌與潰瘍關係的契機。直到約 60 年後，開始有醫師在潰瘍病患的胃部檢體中發現細菌之後，這項研究才被開啟。其後 J. Robin Warren 與 Barry J. Marshall 這兩位醫師發現幽門螺旋桿菌(helicobacter pylori)大量存在於胃部檢體中， 於是將這項研究投稿至 Lancet 雜誌，也因而共同獲得 2005 年的諾貝爾生理醫學獎。</p><p>P.S. 據說 Dr.Marshall 為了證明自己的研究，直接將培養細菌的培養基喝下，果真得了潰瘍，如此的實驗精神真值得敬佩阿~</p><h2 id="幽門螺旋桿菌-helicobacter-pylori"><a href="#幽門螺旋桿菌-helicobacter-pylori" class="headerlink" title="幽門螺旋桿菌(helicobacter pylori)"></a>幽門螺旋桿菌(helicobacter pylori)</h2><p><img src="https://i.imgur.com/2pDMvcG.jpg"></p><p>幽門螺旋桿菌是一種微好氧菌，且其為革蘭氏陰性菌，呈現螺旋狀，且身上有四條鞭毛。</p><p>$Q$ : 那他跟潰瘍的關係是什麼?</p><p>胃酸在胃潰瘍的狀況扮演了一個重要的角色。胃酸的強烈酸性在沒有胃壁黏液的情況下，會直接侵蝕胃壁，最嚴重可能造成胃穿孔。而幽門螺旋桿菌卻會穿透黏液往下鑽，使黏液表面出現孔洞，胃酸便從這個孔洞侵蝕進去，侵蝕胃壁形成潰瘍。</p><p>高風險因子:</p><ul><li>H. Pyroli</li><li>NSAIDS(非類固醇抗發炎藥)</li><li>Stress</li><li>Genetic O DUs A GUs</li><li>Smoking</li><li>Alchhol</li><li>Diet</li><li>Spicy</li><li>Coffee</li></ul><h2 id="消化性潰瘍的診斷"><a href="#消化性潰瘍的診斷" class="headerlink" title="消化性潰瘍的診斷"></a>消化性潰瘍的診斷</h2><ul><li>上消化道鋇劑檢查(Barium meal)<br><img src="https://i.imgur.com/u2eIfd1.png"></li><li>上消化道內視鏡檢查(Endoscopy/Esophagogastroduodenoscopy)</li><li>X 光檢查(X-ray examination)</li></ul><p>若是因幽門螺旋桿菌形成的潰瘍:</p><ul><li>可用人體血液或淋巴循環所含有的抗體進行偵測(IgG)</li><li>尿素呼氣試驗法(Urea Breath Test, UBT)</li></ul><p><img src="https://i.imgur.com/rpi5XbE.png"></p><h2 id="消化性潰瘍的治療"><a href="#消化性潰瘍的治療" class="headerlink" title="消化性潰瘍的治療"></a>消化性潰瘍的治療</h2><ul><li>胃藥(Omeprazole/Zantac/Ranitioine…等)</li><li>胃壁細胞保護與制酸劑</li><li><strong>根除 H. pylori</strong></li></ul><p>根據研究，若是因幽門螺旋桿菌所引起的潰瘍，採取將細菌根除的方式治療，其癒合的潰瘍相對不易再復發，復發率低於 5%，若使用傳統方法治療，其復發率高達 71%以上。傳統上認為難以根治的潰瘍也因為這個新的療法而絕跡，因大部分的潰瘍皆是由幽門螺旋桿菌引起的。</p><p>而哪些病人需要殺菌治療?</p><ol><li>具消化性潰瘍病史，無論有無併發症</li><li>低惡性度之胃淋巴癌(Mucosa Associated Lymphatic Tissue Lymphomas, gastric MALToma)</li><li>胃癌患者及其一等親</li><li>萎縮性胃炎</li><li>GERD(胃食道逆流)、長期服用特效制酸藥 PPI 患者</li><li>NSAIDS 長期服用患者</li><li>Aspirin 長期服用患者並有消化性潰瘍病史</li><li>Idiopathic Thrombocytopenic Purpura(特發性血小板減少性紫癜)</li><li>病患自身意見</li></ol><h2 id="Forrest-Grade"><a href="#Forrest-Grade" class="headerlink" title="Forrest Grade"></a>Forrest Grade</h2><p><a href="https://i.imgur.com/1cmdbKE.png">Forrest Classification</a><br>P.S. 因為照片有胃部內視鏡影像所以放置連結，害怕者請勿點選!</p><p>Forrest Grade 是一種消化道潰瘍出血分級，在 1974 年由 J.A. Forrest 提出。一開始提出是為了統一潰瘍出血的描述，但現在廣泛用於分類患者的潰瘍程度。</p><p>潰瘍的肇因有許多面向要討論，不僅僅是幽門螺旋桿菌所引起的問題，但有關於病患的積極宣導依然十分重要，包括正確的飲食、用藥習慣等，盡量減少細菌能夠存活的環境，便能有效預防之。</p><h1 id="防疫體系"><a href="#防疫體系" class="headerlink" title="防疫體系"></a>防疫體系</h1><blockquote><p>講師 : 國立陽明大學醫學系 張鴻仁教授</p></blockquote><h2 id="霍亂-Cholera"><a href="#霍亂-Cholera" class="headerlink" title="霍亂(Cholera)"></a>霍亂(Cholera)</h2><p>早期的臺灣傳染病不斷，被外來的侵略者視為瘴癘之地，舉日治時期的情況為例，西元 1895 年日軍進攻臺灣時，雖然成功將臺灣納入了大日本帝國的領土，然而根據史料指出，當時全臺流行霍亂(cholera)，登陸的日軍高達 31%染疫，約 1945 人。而北白川宮能久親王也因為在彰化感染霍亂，因而病死於臺南。</p><p>為此，日本政府下令在全臺各地興建醫院與醫學校，如：</p><ul><li><p>基隆衛戍醫院<br><img src="https://i.imgur.com/1capONq.jpg"></p></li><li><p>臺北帝國大學<br><img src="https://i.imgur.com/ZTeEcIq.jpg"></p></li></ul><p>這些學校與醫院也奠定了臺灣在未來數十年的醫療教育的基礎。</p><h2 id="流行性感冒-Influenza"><a href="#流行性感冒-Influenza" class="headerlink" title="流行性感冒(Influenza)"></a>流行性感冒(Influenza)</h2><p>西元 1918 年，西班牙的流感大肆流行，疫情擴散到了全球，造成約 5 億人染疫，9000 萬人死亡，而臺灣在當時亦有約 4 萬人因此喪命。</p><p><img src="https://i.imgur.com/FddgwI8.jpg"></p><p>上方圖片描述當時在美國堪薩斯州賴利堡(FORT RILEY)的軍營醫院，病房中滿是染疫的軍人。</p><p>當時的全球大流行產生了與現今 COVID-19 類似的情況，要求全民必須戴口罩方能使用大眾運輸工具，而疫情也造成各地的醫療資源逐漸出現短缺的情況，陷入了空前的危機。直至今日，流感依然是每年幾乎夏季皆會流行的傳染病之一，並沒有根除。</p><h2 id="臺灣傳染病"><a href="#臺灣傳染病" class="headerlink" title="臺灣傳染病"></a>臺灣傳染病</h2><p>我國在過去曾經根除多項傳染病(Infectious Disease):</p><ul><li>1948 鼠疫(Plague)</li><li>1955 天花(Smallpox)</li><li>1959 狂犬病(Rabies)</li><li>1965 瘧疾(Malaria)</li><li>2000 小兒麻痺症(Poliomyelitis)</li></ul><p>傳染病的主要傳播者是蚊子，而不同種的蚊子容易傳染的疾病病不同，在以下進行整理:</p><table><thead><tr><th align="center">蚊子品種</th><th align="center">英語學名</th><th align="center">傳染疾病</th></tr></thead><tbody><tr><td align="center">瘧蚊</td><td align="center">Anopheles</td><td align="center">瘧疾 Malaria</td></tr><tr><td align="center">斑蚊</td><td align="center">Aedes aegypti</td><td align="center">黃熱病 Yellow Fever、登革熱 Dengue Fever、茲卡 Zika Fever、屈公熱 Chikungunya Fever</td></tr><tr><td align="center">家蚊</td><td align="center">Culex</td><td align="center">日本腦炎 Japanese Encephalitis Virus、西尼羅病毒 West Nile Virus</td></tr></tbody></table><h2 id="流行病學-Epidemiology"><a href="#流行病學-Epidemiology" class="headerlink" title="流行病學(Epidemiology)"></a>流行病學(Epidemiology)</h2><p>“找出新疾病”是流行病學中最為重要的一環。新興傳染病的可怕之處在於指數性的擴散(Exponentially Spread)與不確定性(Uncertainty)，在這種情況下無法預知新興傳染病將帶來的後果，因此令人畏懼。</p><h3 id="COVID-19-SARS-Cov-2"><a href="#COVID-19-SARS-Cov-2" class="headerlink" title="COVID-19(SARS-Cov-2)"></a>COVID-19(SARS-Cov-2)</h3><p>2020 中國爆發新冠肺炎，從武漢這個城市開始往全球各地擴散，現今(2021/6/4)已造成全球近 400 萬人死亡，近日臺灣也進入了三級警戒，情況十分危急。在約莫一年前，教授的演講中提及有關於新冠肺炎的防治方法:</p><ol><li>決戰境外</li><li>整備醫療體系及資源</li><li>準備應對社區感染(新藥、疫苗、遠距篩檢技術與量能)</li><li>是否成為常態性感冒</li></ol><p>從今日的角度看起，教授當時的想法事實上已有對應疫情爆發的相關準備，而現今的情況也進入了社區感染的階段，未來的疫情應對應該如何進行，端看專家與政府如何進行協調與整合，而我們則必須做好防疫的基本工作，以期臺灣疫情早日結束。</p><p>第一天課程的整理終於結束啦~雖然內容繁多，但知識性的概念依然不少喔!一起期待下次的 Day II 整理吧!</p>]]></content>
      
      
      <categories>
          
          <category> YMMC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biology </tag>
            
            <tag> Medical </tag>
            
            <tag> YMMC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫談免疫學BLOG筆記-Day II</title>
      <link href="/2021/06/03/Immune-2/"/>
      <url>/2021/06/03/Immune-2/</url>
      
        <content type="html"><![CDATA[<p>這篇接續了上篇，延續了 TNF-$\alpha$的話題，但接著把病理學帶進了文章中。一起來看看~</p><h1 id="TNF-alpha"><a href="#TNF-alpha" class="headerlink" title="TNF-$\alpha$"></a>TNF-$\alpha$</h1><p>TNF-$\alpha$是維持免疫熱度最重要的 cytokine，在正常情況下含量並不多，但細菌感染後含量會逐漸升高。教授在這裡將免疫熱度分為 5 個層次:</p><table><thead><tr><th align="center">免疫熱度</th><th align="center">症狀</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">正常情況</td></tr><tr><td align="center">2</td><td align="center">稍有微小狀況</td></tr><tr><td align="center">3</td><td align="center">人體產生不適情況</td></tr><tr><td align="center">4</td><td align="center">高燒不退</td></tr><tr><td align="center">5</td><td align="center"><strong>敗血症(septicemia)</strong></td></tr></tbody></table><h1 id="Supplement-Septicemia"><a href="#Supplement-Septicemia" class="headerlink" title="Supplement : Septicemia"></a>Supplement : Septicemia</h1><p>Septicemia 與 Sepsis 雖翻譯上都指敗血症，但事實上其中有所不同，sepsis 指嚴重化的 septicemia 與併發症。敗血症一般是由細菌感染所引起，引發人體產生嚴重的免疫反應，如細菌內外毒素、細胞激素等都可能導致相關的併發症。</p><p>根據不同的病原體，產生的敗血症可能也有所不同，包括金黃色葡萄球菌敗血症、腸道鏈球菌敗血症…等，若沒有經由妥善治療，可能會引發<strong>敗血性休克(septic shock)</strong>:</p><p>當細菌感染時，部分部位會有炎症反應，血管的通透性便會增加，此時，平常待在血管中的如白蛋白等原先維持血液中滲透壓的物質便會經由開口跑到組織當中，平時在白蛋白的幫助之下，約 90%的血漿溢出之後便會經由原處因滲透壓滲回，但在發炎反應之下，血液中的滲透壓濃度不足以讓血漿滲回，過量的血漿堆積導致局部組織水腫。</p><p><img src="https://i.imgur.com/PIUqL5b.jpg"></p><p>在此同時，血管中的血液因而減少，重要器官如大腦或腎臟等處的血壓不足，若血管收縮依然無法改善，即會產生敗血性休克。</p><h1 id="TNF-alpha-Cycle"><a href="#TNF-alpha-Cycle" class="headerlink" title="TNF-$\alpha$ Cycle"></a>TNF-$\alpha$ Cycle</h1><p>TNF-$\alpha$在沒有細菌感染的情況之下，走以下的循環路徑:<br><img src="https://i.imgur.com/mBYAeUb.jpg"></p><p>圖中 NF-kB 在 GSK3 的刺激下活化，轉錄出少量的 TNF-$\alpha$ mRNA，TNF-$\alpha$再去持續活化更多的中性球、T 細胞以及 B 細胞，此外，PKB 在上游的活化，也會抑制 GSK3 對於 NF-kB 的活化，避免產生過量的 TNF-$\alpha$。</p><p>此外，巨噬細胞(Macrophage)與嗜中性球(Neutrophil)在細菌感染時都會感應細菌細胞壁上的 LPS，引發 TNF-$\alpha$的下游反應。不同的是，中性球在吞噬細菌之後會死亡，相反的，巨噬細胞會繼續擴大免疫反應。</p><p>在 TNF-$\alpha$的刺激下，Neutrophil 的壽命會延長，超過原有的壽命約 8-12hr。在血液中被活化的中性球、T cell 與 B cell，都會進行 TNF-$\alpha$ cycle，但基於以上提到的免疫熱度概念，TNF-$\alpha$的量亦不能過多，教授表達<strong>熱度要夠但不能太熱</strong>，重點在於清除體內的病原體，但也不能因此讓人體產生無法承受的免疫反應。</p><h1 id="LPS-TLR-4-Pathway"><a href="#LPS-TLR-4-Pathway" class="headerlink" title="LPS/TLR-4 Pathway"></a>LPS/TLR-4 Pathway</h1><p>上次提及了 TNF-$\alpha$/TNFR Pathway，這次來解釋上圖右方的 LPS/TLR-4 Pathway。這兩個傳訊路徑共同刺激了下游的 TNF-$\alpha$生成。</p><p><img src="https://i.imgur.com/ywhV5j4.jpg"></p><p>看到 TRAF 應該可以聯想到上次的 TNF-$\alpha$/TNFR Pathway 裡面也有相同的複合物，事實上上次的最後一張圖便是將這兩個 Pathway 進行的一個統整。TRAF 在於兩者中都扮演重要的中間傳訊者，總括而言，有四條下游的路徑可以走:</p><p>TRAF6 下游:<br>其與 TNF-$\alpha$/TNFR Pathway 其中兩條的路徑是一樣的，分別為:</p><ul><li>MAP kinase Pathway</li><li>IKK$\beta$/IkB$\alpha$/NF-kB Pathway</li></ul><p>TRAF3 下游:<br>這是相對比較不同的路徑，如下:</p><ul><li>cIAP1/2 將 TRAF3 泛素化(ubiquitination)，直接走向降解路徑(degradeation)。</li><li>走向 IRF-3 路徑，進入核內轉錄出第一型干擾素(Type I IFNs)</li></ul><p>此外，不僅是免疫細胞，如上皮細胞等也能夠走相同路徑，但上皮細胞不轉錄 TNF-$\alpha$，走 IFN 路徑，發生抗炎反應抑制 Pro-inflammatory cytokines 的產生，在細菌感染時避免 Neutrophil 及 TNF-$\alpha$突然增多而引發敗血症。</p><h1 id="代謝性酸中毒"><a href="#代謝性酸中毒" class="headerlink" title="代謝性酸中毒"></a>代謝性酸中毒</h1><p>當免疫反應過於激烈時，人體會擴大產生 TNF-$\alpha$，開啟 Th1/Th2 immunity。但在這個同時，前面提及 TNF-$\alpha$會對上皮、肌肉、神經細胞傳遞死亡訊號，當 TNF-$\alpha$過多時，器官細胞會開始皺縮，胞質溢出導致全身器官血腫，進而缺氧。</p><p>器官便從原有的有氧呼吸切換到無氧呼吸，產生大量的乳酸根離子，最終將體液$H_2O$的$H^+$搶走以電荷中和(體內$Na^+$含量大約固定為 135-145 meq/L，不夠讓過多的乳酸進行中和)，剩餘的$OH^-$便會以陰離子$HCO_{3}^-$的形式向腎臟進行交換$Cl^-$(在高中提及腎小管交換機制):</p><p><img src="https://i.imgur.com/tfpmoaG.jpg"></p><p>如此導致高血氯的發生，並陷入氧氣更難進入的惡性循環。此外，原先的鹼性$HCO_{3}^-$被取代為中性的$Cl^-$後，體液$pH$值會持續下降，成為所謂的代謝性酸中毒。</p><p>下次來整理 TLR 的一些相關內容吧~</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://wleemc.pixnet.net/blog/post/118886352-%E6%BC%AB%E8%AB%87%E5%85%8D%E7%96%AB%E5%AD%B8-2">https://wleemc.pixnet.net/blog/post/118886352-%E6%BC%AB%E8%AB%87%E5%85%8D%E7%96%AB%E5%AD%B8-2</a></p>]]></content>
      
      
      <categories>
          
          <category> Biology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biology </tag>
            
            <tag> Medical </tag>
            
            <tag> Immunity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫談免疫學BLOG筆記-Day I</title>
      <link href="/2021/05/20/Immune-1/"/>
      <url>/2021/05/20/Immune-1/</url>
      
        <content type="html"><![CDATA[<p>之前看到老師在社團分享李教授在部落格中所分享的文章，覺得心生興趣於是就拜訪了那個部落格，裡面的內容與免疫知識十分充足而且有趣，那麼就用自己的方法來整理它吧~</p><h1 id="Day-I"><a href="#Day-I" class="headerlink" title="Day I"></a>Day I</h1><h2 id="Bacteria-Immunity"><a href="#Bacteria-Immunity" class="headerlink" title="Bacteria Immunity"></a>Bacteria Immunity</h2><p>這篇主要整理 LPS ~ TLR ~ NF-kB ~ TNF-$\alpha$ Pathway，文章前面提及數十年前的免疫學知識遠比現在所了解的更少，例如細菌的 LPS(Lipopolysaccharide)打入小鼠後會讓老鼠身上的腫瘤發生潰爛，是 TNF-$\alpha$的效應，但精確機制為何，在當時依然為謎。</p><p><img src="https://i.imgur.com/l8VCLuN.jpg"></p><p>TNF-$\alpha$是由淋巴細胞(Lymphocyte)產生的 Lymphotoxin，全名是<strong>腫瘤壞死因子$\alpha$<strong>，根據教授的說明，其是維持</strong>人體免疫熱度</strong>最重要的細胞激素(Cytokine)</p><ul><li>NF-kB 是負責免疫細胞激素(Inflammatory cytokines)轉錄最重要的轉錄因子(Transcription factor)</li><li>GSK3 是維持 NF-kB 基礎活性的激酶(Kinase)。</li><li>PKA/PKB 亦是激酶，其中 PKB 被教授稱為”激酶之王”</li></ul><p>TNF-$\alpha$在免疫反應中主要維持<strong>中性球(Neutrophil)與淋巴球</strong>的免疫活性，在病原體入侵時量會增加以擴大免疫反應阻絕病原體。若沒有經過此一活化，則人體無法啟動與維持<strong>Th1/Th2 Immunity</strong>的進行。</p><h2 id="Supplement-Th1-Th2-Immunity"><a href="#Supplement-Th1-Th2-Immunity" class="headerlink" title="Supplement : Th1/Th2 Immunity"></a>Supplement : Th1/Th2 Immunity</h2><p>T 細胞在人體中是細胞激素的主要來源，而其所產生的 Th1/Th2 則是人體中最為主要的兩大細胞激素族群，其下又分別有多種的細胞激素。廣泛而言，Th1 型細胞激素主要負責寄生蟲殺害與促炎反應，例如干擾素$\gamma$(IFN-$\gamma$)。但過度的促炎反應會對人體造成損傷，因此 Th2 機制便是在 Th1 過量時進行抑制殺死微生物的作用。Th2 包含 IL-4,IL-5 及 IL-13 等，與促進嗜酸性球及 IgE 活性有關。此二細胞激素的拮抗構成了此一免疫機制的基本適應。</p><p>Ref. <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC27457/">(NCBI) Th1 and Th2 responses: what are they?</a></p><p>TNF-$\alpha$顧名思義是一種誘導細胞死亡的蛋白，但事實上他的功能一體兩面，不僅可促進細胞凋亡，也可以促進細胞生存，一種蛋白有兩種截然不同的功能，十分新奇。(但值得注意的是，它並不是對單一細胞同時傳遞兩種訊息，相反的，它針對特定細胞傳遞生存訊號或死亡訊號)</p><p>教授在部落格中特別提出了這段話來說明:</p><p><strong>TNF-$\alpha$一方面活化 Immune cell(免疫細胞), Fibroblast(纖維母細胞), Stromal cell(基質細胞), Stem cell(幹細胞), Vascular endothelial cell(血管內皮細胞)，促進這些細胞存活及分裂(Survival &gt;&gt; Death)；另一方面在人體最多的 Epithelial cell(上皮細胞), muscle cell(肌肉細胞), nerve cell(神經細胞) 則傳遞凋亡訊息(Death &gt; Survival)。</strong></p><h2 id="TNF-alpha-TNFR-TRAF2-Pathway"><a href="#TNF-alpha-TNFR-TRAF2-Pathway" class="headerlink" title="TNF-$\alpha$/TNFR/TRAF2 Pathway"></a>TNF-$\alpha$/TNFR/TRAF2 Pathway</h2><p>接著討論 TNFR(TNF receptor)。事實上這個 recepter 早在西元 1985 年就被發現，然而其下游的組裝機制在約 1994-1996 年之後才被發現。<br><img src="https://i.imgur.com/YxXiEdc.jpg"></p><p>以這張圖片為例，當 TNF-$\alpha$接上了 TNFR 之後(游離態，此圖未顯示)，插入細胞膜之中，TRADD, TRAF2, RIP1 會聚集過來接上，促成 TRAF2 與 RIPK1 的被動磷酸化(Autophosphorylation)與泛素化(Polyubiquitination)(Ub)(主要功能為標記)。此活化上游路徑稱為 TNF-$\alpha$/TNFR/TRAF2 Pathway。其下游根據所處細胞的不同可能會激發不同的反應途徑。</p><p>圖示左邊的途徑中，有一個 TAK1 接上 TAB2/3 與 TAB1 的 complex，其在接觸了 TRAF 的磷酸化部位之後，TAK1 會進行磷酸化及泛素化，並將其下游的 IKK$\beta$磷酸化，IKK$\beta$再將 IkB 磷酸化之後，p-IkB 與 NF-kB 分離，p-IkB 隨後進入 Ubiquitin-Proteasome degradation pathway 進行降解，而 NF-kB 則進入核內，即作為轉錄因子，可以控制轉錄。</p><p>TNF-$\alpha$在免疫細胞中另一個途徑是走 MAP kinase pathway，也就是在 TAK1 下游的另一條路徑。但這條路徑過於複雜，有許多在旁的激酶與激素等，因此留待日後補充。</p><p>另外圖中補充了引發細胞凋亡(apoptosis)與壞死性凋亡(necroptosis)的途徑，主要由原本在 TNFR 下方複合物中的 RIPK-1 游離後接上 FADD 與 caspase8 組成新的 complex，再經由不同的途徑接上激酶等因子後進行凋亡，如上皮細胞接收到 TNF-$\alpha$的信號時，就會引起細胞凋亡路徑。</p><p>至此第一篇的筆記整理算是到此結束，然而上方所提及的僅是主要路徑的模式，至於是否僅有這些?當然不是啊!下方附圖是加上了其他訊號加強或是抑制的示意圖，所有的訊號都是經由其他的 Recepter 經過訊號整合後才進行下游途徑的，因此，單一訊號的傳遞，絕對不是僅由單一變因控制的喔!<br><img src="https://i.imgur.com/gvbFeAj.png"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://wleemc.pixnet.net/blog/post/118860702-%E6%BC%AB%E8%AB%87%E5%85%8D%E7%96%AB%E5%AD%B8-1">https://wleemc.pixnet.net/blog/post/118860702-%E6%BC%AB%E8%AB%87%E5%85%8D%E7%96%AB%E5%AD%B8-1</a></p>]]></content>
      
      
      <categories>
          
          <category> Biology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biology </tag>
            
            <tag> Medical </tag>
            
            <tag> Immunity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quantum Computing Part II</title>
      <link href="/2021/05/16/Quantum-Computing-2/"/>
      <url>/2021/05/16/Quantum-Computing-2/</url>
      
        <content type="html"><![CDATA[<p>基礎的線性代數對於量子的運算是不可或缺的，因此這幾篇文章會先來建立線性代數的相關基礎概念。</p><h1 id="Foundamental-Linear-Algebra-of-Quantum-Computing-Part-I"><a href="#Foundamental-Linear-Algebra-of-Quantum-Computing-Part-I" class="headerlink" title="Foundamental Linear Algebra of Quantum Computing Part I"></a>Foundamental Linear Algebra of Quantum Computing Part I</h1><h2 id="Why-all-math"><a href="#Why-all-math" class="headerlink" title="Why all math?"></a>Why all math?</h2><p>許多的量子學習者總被大量的數學運算搞得暈頭轉向，然而，數學對於量子而言，是必要的基礎以及工具，尤其對於線性代數(向量(Vector)、矩陣(Matrix))、機率(Probability)以及複數(Complex Numbers)等領域，會是量子運算的根基。在未來我們將會提及，現在所進行的所有運算將都能利用數學語言來呈現。高中必修的部分，也將在這裡快速帶過。</p><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>向量是許多領域的基礎，接續下來所要介紹的複數與矩陣等都會用到相關的概念，要好好學習喔!這裡主要整理比較常用到的概念，比較簡單的細節部份就有待各位自行鑽研囉~(其實學校學的也夠用了啦 XD)</p><h3 id="Vector-Notation"><a href="#Vector-Notation" class="headerlink" title="Vector Notation"></a>Vector Notation</h3><p>$\vec{v}=\left(<br>\begin{array}{}<br>v_x \<br>v_y \<br>\end{array}<br>\right)$</p><h3 id="Vector-Magnititude"><a href="#Vector-Magnititude" class="headerlink" title="Vector Magnititude"></a>Vector Magnititude</h3><p>$|\vec{v}|=\sqrt{v_x^{2}+v_y^{2}}$</p><h3 id="Vector-Direction"><a href="#Vector-Direction" class="headerlink" title="Vector Direction"></a>Vector Direction</h3><p>$\angle \vec{v}=\tan^{-1}\dfrac{v_x}{v_y}$</p><h3 id="Vector-Addition"><a href="#Vector-Addition" class="headerlink" title="Vector Addition"></a>Vector Addition</h3><p>$\vec{a}+\vec{b}=\left(<br>\begin{array}{}<br>a_x + b_x \<br>a_y + b_y \<br>\end{array}<br>\right)$</p><h3 id="Vector-Scalar-Multiplication"><a href="#Vector-Scalar-Multiplication" class="headerlink" title="Vector-Scalar Multiplication"></a>Vector-Scalar Multiplication</h3><p>$c\times \vec{v}=\left(<br>\begin{array}{}<br>c\times v_x \<br>c\times v_y \<br>\end{array}<br>\right)$</p><h3 id="Vector-Generalization"><a href="#Vector-Generalization" class="headerlink" title="Vector Generalization"></a>Vector Generalization</h3><p><img src="https://i.imgur.com/M9x4Lfw.png"></p><p>咦，向量只有這樣而已嗎?沒辦法，會用到的簡單到不知道要寫什麼了$QQ$</p><h2 id="Complex-Numbers"><a href="#Complex-Numbers" class="headerlink" title="Complex Numbers"></a>Complex Numbers</h2><h3 id="Why-Complex-Numbers"><a href="#Why-Complex-Numbers" class="headerlink" title="Why Complex Numbers?"></a>Why Complex Numbers?</h3><p>$ax^2+bx+c=0\Rightarrow x=\dfrac{-b±\sqrt{b^2-4ac}}{2a}$<br>$D=\sqrt{b^2-4ac}$<br>If $D&lt;0$ $?$ $\Rightarrow$ $\sqrt{-1}$ $???$</p><p>Then, we defined $\sqrt{-1}$ as $i$ !</p><ul><li>A complex number consists of both a <strong>real</strong> and <strong>imaginary component</strong><br><img src="https://i.imgur.com/grzOC9s.png"></li></ul><h3 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h3><ul><li>Complex numbers can additionally be represented as <strong>vectors</strong>, in the <strong>2D complex plane</strong>!<br><img src="https://i.imgur.com/5MBwzCv.png"></li></ul><h3 id="Complex-Number-Addition"><a href="#Complex-Number-Addition" class="headerlink" title="Complex Number Addition"></a>Complex Number Addition</h3><p>$(a+ib)+(c+id)=(a+c)+i(b+d)$</p><h3 id="Complex-Number-Multiplication"><a href="#Complex-Number-Multiplication" class="headerlink" title="Complex Number Multiplication"></a>Complex Number Multiplication</h3><p>$(a+ib)\times(c+id)=(ac-bd)+i(ad+bc)$</p><h3 id="Complex-Number-Conjugation"><a href="#Complex-Number-Conjugation" class="headerlink" title="Complex Number Conjugation"></a>Complex Number Conjugation</h3><p>共軛複數是一個全新的觀念，要注意一下唷~</p><p>$\overline{(a+ib)}=(a-ib)$</p><h3 id="Complex-Number-Modulus"><a href="#Complex-Number-Modulus" class="headerlink" title="Complex Number Modulus"></a>Complex Number Modulus</h3><p>$|a+ib|=\sqrt{a^2+b^2}$<br>$|a+ib|^2=a^2+b^2$</p><p>接下來是重要的理論，我們將利用尤拉定理(Euler’s Formula)來進行複數的帶換，加入角度的概念，將複數利用另外一種形式來表示。</p><h3 id="Euler’s-Formula-amp-Complex-Exponentials"><a href="#Euler’s-Formula-amp-Complex-Exponentials" class="headerlink" title="Euler’s Formula &amp; Complex Exponentials"></a>Euler’s Formula &amp; Complex Exponentials</h3><p>$e^{i\phi}=\cos\phi+i\sin\phi→$<strong>(Euler’s Formula)</strong><br>$z=x+iy=|z|(\cos\phi+i\sin\phi)=re^{i\phi}$<br>$r=|z|=\sqrt{x^2+y^2}$<br>$\phi=\tan^{-1}(\dfrac{y}{x})$</p><h3 id="Euler’s-Identity"><a href="#Euler’s-Identity" class="headerlink" title="Euler’s Identity"></a>Euler’s Identity</h3><p>$e^{i\pi}+1=0$</p><h3 id="Complex-Exp-Addition"><a href="#Complex-Exp-Addition" class="headerlink" title="Complex Exp. Addition"></a>Complex Exp. Addition</h3><p>一般而言，要將複指數進行加減是十分不易的，必須將其轉回標準狀態的複數形式才能夠進行加減。然而，透過以下兩式的轉換，可以簡化這方面的運算。</p><p>$\dfrac{e^{i\phi}+e^{-i\phi}}{2}=\cos\phi$<br>$\dfrac{e^{i\phi}-e^{-i\phi}}{2i}=\sin\phi$</p><p>e.g.</p><p>$e^{-i\dfrac{\pi}{2}}-e^{i\dfrac{\pi}{2}}=2i\sin{\dfrac{\pi}{2}}=2i$</p><h3 id="Complex-Exp-Multiplication"><a href="#Complex-Exp-Multiplication" class="headerlink" title="Complex Exp. Multiplication"></a>Complex Exp. Multiplication</h3><p>$e^{i\phi}e^{i\theta}=e^{i(\phi+\theta)}$</p><h3 id="Complex-Exp-Modulus"><a href="#Complex-Exp-Modulus" class="headerlink" title="Complex Exp. Modulus"></a>Complex Exp. Modulus</h3><p>$|z|=|re^{i\phi}|=r(r&gt;0)$</p><h3 id="Complex-Exp-Conjugation"><a href="#Complex-Exp-Conjugation" class="headerlink" title="Complex Exp. Conjugation"></a>Complex Exp. Conjugation</h3><p>$\overline{e^{i\phi}}=e^{-i\phi}$</p><p>事實上，複數平面就是向量的運用，利用實數與虛數構成的平面進行代數的幾何化，並帶入三角函數的概念來進行轉換，此二概念是相輔相成的，可以多多注意。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Quantum Computing </tag>
            
            <tag> Mathematics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quantum Computing Part I</title>
      <link href="/2021/05/08/Quantum-Computing-1/"/>
      <url>/2021/05/08/Quantum-Computing-1/</url>
      
        <content type="html"><![CDATA[<p>這篇先來介紹量子運算的基礎-位元運算吧!位元的運算不管是對於傳統電腦或量子電腦皆是不可或缺的基礎，而量子電腦則拓展到了特殊化的標記與邏輯閘的運算。</p><h1 id="Foundamental-Notation-of-Quantum-Computing"><a href="#Foundamental-Notation-of-Quantum-Computing" class="headerlink" title="Foundamental Notation of Quantum Computing"></a>Foundamental Notation of Quantum Computing</h1><h2 id="Definition-of-Quantum-Computing"><a href="#Definition-of-Quantum-Computing" class="headerlink" title="Definition of Quantum Computing"></a>Definition of Quantum Computing</h2><p>量子位元(以下簡稱 Qubit)運用狄拉克標記(Dirac notation)來描述一個量子$\phi$的狀態，並以單位位元$|0〉$與$|1〉$的線性組合來定義之。</p><p>$|\phi〉=\alpha|0〉+\beta|1〉；\alpha,\beta∈C$</p><p>而透過量子力學可以得知，$\phi$ 係數平方和 $\alpha^2+\beta^2=1$，且$\alpha^2$與$\beta^2$分別代表了$|0〉$與$|1〉$出現的機率。</p><h2 id="Quantum-Gates"><a href="#Quantum-Gates" class="headerlink" title="Quantum Gates"></a>Quantum Gates</h2><p>首先介紹關於<strong>單一</strong>量子位元的操作邏輯閘(Logic Gates)。</p><h3 id="Pauli-X-Gate"><a href="#Pauli-X-Gate" class="headerlink" title="Pauli-X Gate"></a>Pauli-X Gate</h3><p><img src="https://i.imgur.com/HnMqveX.png"><br>Bit-Flip.其定義為翻轉(flip)量子位元，顧名思義，它進行以下運算:</p><p>$|0〉→|1〉$<br>$|1〉→|0〉$</p><h3 id="Pauli-Z-Gate"><a href="#Pauli-Z-Gate" class="headerlink" title="Pauli-Z Gate"></a>Pauli-Z Gate</h3><p><img src="https://i.imgur.com/xJvPglw.png"><br>Phase Gate.此邏輯閘定義為保留$|0〉$的狀態不變，且將$|1〉$換成$-|1〉$</p><p>$|0〉→|0〉$<br>$|1〉→-|1〉$</p><h3 id="Hadamard-Gate"><a href="#Hadamard-Gate" class="headerlink" title="Hadamard Gate"></a>Hadamard Gate</h3><p><img src="https://i.imgur.com/KSQ6cIl.png"><br>Create a 50-50 superstition from $|0〉$ and $|1〉$。建立出出現$|0〉$$|1〉$機率各 50%的量子位元</p><p>$|0〉→\dfrac{|0〉+|1〉}{\sqrt{2}}$<br>$|1〉→\dfrac{|0〉-|1〉}{\sqrt{2}}$</p><p>※ 量子閘具有線性運算特性，遵守運算基本性質(分配律與結合律)。</p><h3 id="Supplement-TWICE-HADAMARD"><a href="#Supplement-TWICE-HADAMARD" class="headerlink" title="Supplement : TWICE HADAMARD"></a>Supplement : TWICE HADAMARD</h3><p>$For$ $|0⟩$:</p><p>$H(\dfrac{|0⟩+|1⟩}{\sqrt2})=\dfrac{H(|0⟩)+H(|1⟩)}{\sqrt2}$</p><p>$=\dfrac{1}{\sqrt2}(\dfrac{|0⟩+|1⟩}{\sqrt2}+\dfrac{|0⟩-|1⟩}{\sqrt2})$</p><p>$=|0⟩$</p><p>$For$ $|1⟩$:</p><p>$H(\dfrac{|0⟩-|1⟩}{\sqrt2})=\dfrac{H(|0⟩)-H(|1⟩)}{\sqrt2}$</p><p>$=\dfrac{1}{\sqrt2}[\dfrac{|0⟩+|1⟩}{\sqrt2}-(\dfrac{|0⟩-|1⟩}{\sqrt2})]$</p><p>$=|1⟩$</p><p>接著介紹多個量子位元的表示法與運算閘。</p><h3 id="Multiple-Qubit-Notation"><a href="#Multiple-Qubit-Notation" class="headerlink" title="Multiple Qubit Notation"></a>Multiple Qubit Notation</h3><p>$|0〉→$ qibit A is $|0〉$<br>$|00〉→$ qibit A is $|0〉$ and qubit B is $|0〉$<br>$|000〉→$ qibit A is $|0〉$ and qubit B is $|0〉$ and qubit C is $|0〉$<br>…etc</p><h3 id="CNOT-Gate"><a href="#CNOT-Gate" class="headerlink" title="CNOT Gate"></a>CNOT Gate</h3><p><img src="https://i.imgur.com/1D87YKH.png"><br>Controlled Not.以控制位元決定是否要翻轉目標位元。</p><table><thead><tr><th align="center">Control Qubit</th><th align="center">Target Qubit Flip or NOT</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">False</td></tr><tr><td align="center">1</td><td align="center">True</td></tr></tbody></table><h2 id="Exercise-Quantum-Entanglement"><a href="#Exercise-Quantum-Entanglement" class="headerlink" title="Exercise : Quantum Entanglement"></a>Exercise : Quantum Entanglement</h2><p>Question: How to create an entagled state quantum bit?</p><p>Now we have two qubits: Qubit A and Qubit B.<br>Our target is to make these two qubits influence each other.<br>So, we have to make sure that one of the qubit’s value will be fixed after the other one is defined.$→$ <strong>Use CNOT Gate</strong><br>And we also need to set the first qubit into two-valued state.$→$ <strong>Use Hadamard Gate</strong><br><img src="https://i.imgur.com/Hl4cgsG.png"><br>We create an entangled state quantum bit successfully!</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Quantum Computing </tag>
            
            <tag> Mathematics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quantum Computing Getting Started</title>
      <link href="/2021/05/01/Quantum-Computing/"/>
      <url>/2021/05/01/Quantum-Computing/</url>
      
        <content type="html"><![CDATA[<p>這是一部基於 IBM QxQ 量子基礎課程的筆記，將從最基本的數學基礎延伸到量子相關內容。量子應用的層面相當廣泛，從醫療、通訊、金融服務、交通、AI、天氣預報，甚至於加密演算法，皆有其可觀之處。此文章將由淺入深，介紹量子學習相關的內容以及演算方法。</p><h1 id="Quantum-Computing-Basic"><a href="#Quantum-Computing-Basic" class="headerlink" title="Quantum Computing Basic"></a>Quantum Computing Basic</h1><p>量子運算的核心精神是利用量子的相關物理特性，如干涉(intervene)、糾纏(entanglement)與疊加(superstition)等，來進行傳統電腦(classical computers)所無法進行的快速運算。現今最為有名的應用為整數分解(integer factorization)，其可應用於破解傳統非對稱式加密演算法 RSA 的核心加密要素-大數分解。</p><h1 id="Introduce-of-Quantums"><a href="#Introduce-of-Quantums" class="headerlink" title="Introduce of Quantums"></a>Introduce of Quantums</h1><p>量子計算系統運用了量子位元(Qubit)來進行訊息的傳遞。傳統電腦運算系統運用數字 0 與 1 來表達訊息，且在某一時間點僅存在一種狀態。而與傳統電腦相對而言，量子電腦(Quantum Computer)特殊的地方便在於其可同時對 0 與 1 進行運算，成為一種 0 與 1 同時存在的狀態，稱之為疊加態(superstition)。</p><h1 id="Quantum-Computing’s-History"><a href="#Quantum-Computing’s-History" class="headerlink" title="Quantum Computing’s History"></a>Quantum Computing’s History</h1><p>量子運算最早可追溯至 1980 年初的 Paul Banioff 提出量子力學模型(quantum mechanical model)的圖靈機(Turing machine)。在其之後，著名物理學家 Richard Feynman 與 Yuri Manin 提出量子計算機有潛力突破傳統電腦的限制，模擬傳統計算機(Computer)所無法達成的事情。這也成功造就了量子技術的蓬勃發展。</p><h1 id="Qunatum’s-Application"><a href="#Qunatum’s-Application" class="headerlink" title="Qunatum’s Application"></a>Qunatum’s Application</h1><p>量子應用的相關層面可說是十分廣泛，舉凡醫學(Medicine)、藥學(Pharmacy)、經濟(Finance)、天氣(Weather)等生活中的應用，以及最不可或缺的資訊類別，如人工智慧(Artificial Intelligence)、密碼學(Cryptography)，量子運算正在每個領域中悄悄蔓延。量子運算將大幅減少傳統電腦所需負擔的計算時間，這同時也減少了公司金錢的支出。</p><h1 id="Modern-Quantum-Computing’s-Development"><a href="#Modern-Quantum-Computing’s-Development" class="headerlink" title="Modern Quantum Computing’s Development"></a>Modern Quantum Computing’s Development</h1><ul><li>1981 Richard Feynman 提出一個用於模擬量子系統的框架(Framework)。</li><li>1994 Peter Shor 表明量子運算能夠有效分解大型整數。</li><li>1998 運用 2-qubit NMR 量子計算機的首次量子運算實驗進行。</li><li>2017 雲端量子技術形成。</li><li>2019- 量子時代來臨</li></ul><p>看了這麼多，你認為量子距離你遙不可及嗎?答案顯然是否定的。基本的運算與計算培養對於量子技術的養成是不可或缺的。先讓我們來窺探量子世界的微小基礎吧!</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Quantum Computing </tag>
            
            <tag> Mathematics </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
